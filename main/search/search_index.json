{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#description","title":"Description","text":"<p>Many development tools allow or require to provide information about the software project they are used in. These tools are often very specific to the programming-language and the task at hand and often come with their own configuration files. Emerging best practices for FAIR software metadata require to add even more files providing information such as the project name, description, version, repository url, license or authors.</p> <p>If setting up the different files only once would be enough, there would not be an issue. But software is always in development and a moving target - versions and maintainers can change, contributors come and go, the version number is regularly increased, the project can be moved to a different location. Maintaining this kind of information and updating it in various files and formats used in the project by hand is tedious, error-prone and time consuming. Somesy automates the synchronization of general software project metadata and frees your time to focus on your actual work.</p>"},{"location":"#concepts","title":"Concepts","text":"<p>Because the same information is represented in different ways and more or less detail in different files, somesy requires to put all project information in a somesy-specific input section is located in a supported input file. Somesy will use this as the single source of truth for the supported project metadata fields and can synchronize this information into different output files.</p> <p>Somesy first converts the information as needed for an output, while trying to preserve as much information as possible. Then it carefully updates the file, while keeping all other fields in the target file unchanged. For files that are usually edited by hand, it will even make sure that the comments in your TOML and YAML files stay in place.</p>"},{"location":"#supported-file-formats","title":"Supported File Formats","text":"<p>Here is an overview of the supported files and formats.</p> Input Formats Comment pyproject.toml <code>tool.somesy</code> section package.json TBD .somesy.toml \u2713 Output Formats Status pyproject.toml (poetry) \u2713 pyproject.toml (setuptools) \u2713 package.json TBD mkdocs.yml TBD CITATION.cff \u2713 codemeta.json TBD <p>Somesy does not support setuptools dynamic fields in this version.</p>"},{"location":"#supported-metadata-fields","title":"Supported Metadata Fields","text":"<p>The below table shows which fields are mapped to corresponding other fields in the currently supported formats. Some of the metadata fields are required inputs in the somesy input file. <code>somesy</code> will give an error if required fields are not filled.</p> Project Metadata Poetry Config SetupTools Config CITATION.cff Requirement name name name title required version version version version optional description description description abstract required authors authors authors authors required maintainers maintainers maintainers contact optional keywords keywords keywords keywords optional license license license license required repository repository urls.repository repository_code optional homepage homepage urls.homepage url optional"},{"location":"#project-metadata","title":"Project Metadata","text":"<p>Somesy input has the information on what is the most important for metadata and standard columns between different file formats. Somesy input columns are explained below.</p> <ul> <li>name: Software name - String</li> <li>version: Software version - String</li> <li>description: Software description - String</li> <li>authors: Software authors - List of <code>Person</code>s</li> <li>maintainers: Software maintainers - List of <code>Person</code>s</li> <li>contributors: Software contributors - List of <code>Person</code>s</li> <li>keywords: Keywords that explain the software - List of strings</li> <li>license: SPDX string of the license - String in SPDX string format</li> <li>repository: The repository URL - String in URL format</li> <li>homepage: The software website - String in URL format</li> </ul> <p><code>Person</code> is a subclass of the Project Metadata, based on the CFF version 1.2.0 Person class. We added contribution relation fields to this <code>Person</code> class to appreciate all the contributions to the project. <code>Person</code> class fields:</p> <ul> <li>address: The person's address. - String</li> <li>affiliation: The person's affiliation. - String</li> <li>alias: The person's alias. - String</li> <li>city: The person's city. - String</li> <li>country: The person's country abbreviation in two capital characters. - String</li> <li>email: The person's email address. - String in email format</li> <li>family-names: The person's family names. - String</li> <li>fax: The person's fax number. - String</li> <li>given-names: The person's given names. - String</li> <li>name-particle: The person's name particle, e.g., a nobiliary particle or a preposition meaning 'of' or 'from' (for example, 'von' in 'Alexander von Humboldt'). - String</li> <li>name-suffix: The person's name-suffix, e.g. 'Jr.' for Sammy Davis Jr. or 'III' for Frank Edwin Wright III. - String</li> <li>orcid: The person's ORCID URL. - String in URL format</li> <li>post_code: The person's post-code. - String</li> <li>tel: The person's phone number. - String</li> <li>website: The person's website. - String in URL format</li> <li>contribution: Summary of how the person contributed to the project. - String</li> <li>contribution_type: Contribution type of contributor using emoji from all contributors. - String in emoji name or list of strings</li> <li>contribution_begin: Beginning date of the contribution. - Date in YYYY-MM-DD format</li> <li>contribution_end: Ending date of the contribution. - Date in YYYY-MM-DD format</li> </ul> <p>Input fields have to adhere above restrictions. If not, somesy tool will raise errors.</p>"},{"location":"#usage","title":"Usage","text":"<p>To get started, please check out the quickstart guide.</p>"},{"location":"#how-to-cite","title":"How to Cite","text":"<p>If you want to cite this project in your scientific work, please use the citation file in the repository.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This project was developed at the Institute for Materials Data Science and Informatics (IAS-9) of the J\u00fclich Research Center and funded by the Helmholtz Metadata Collaboration (HMC), an incubator-platform of the Helmholtz Association within the framework of the Information and Data Science strategic initiative.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>Here we provide notes that summarize the most important changes in each released version.</p> <p>Please consult the changelog to inform yourself about breaking changes and security issues.</p>"},{"location":"changelog/#0.1.0","title":"v0.1.0 (2023-05-12)","text":"<ul> <li>First release</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the project maintainers by e-mail. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"How To Contribute","text":"<p>All kinds of contributions are very welcome! You can contribute in various ways, e.g. by</p> <ul> <li>providing feedback</li> <li>asking questions</li> <li>suggesting ideas</li> <li>implementing features</li> <li>fixing problems</li> <li>improving documentation</li> </ul> <p>To make contributing to open source projects a good experience to everyone involved, please make sure that you follow our code of conduct when communicating with others.</p>"},{"location":"contributing/#ideas-questions-and-problems","title":"Ideas, Questions and Problems","text":"<p>If you have questions or difficulties using this software, please use the issue tracker.</p> <p>If your topic is not already covered by an existing issue, please create a new issue using one of the provided issue templates.</p> <p>If your issue is caused by incomplete, unclear or outdated documentation, we are also happy to get suggestions on how to improve it. Outdated or incorrect documentation is a bug, while missing documentation is a feature request.</p> <p>NOTE: If you want to report a critical security problem, do not open an issue! Instead, please create a private security advisory, or contact the current package maintainers directly by e-mail.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>This project uses Poetry for dependency management.</p> <p>You can run the following lines to check out the project and prepare it for development:</p> <pre><code>git clone git@github.com:Materials-Data-Science-and-Informatics/somesy.git\ncd somesy\npoetry install --with docs\npoetry run poe init-dev\n</code></pre> <p>Common tasks are accessible via poe:</p> <ul> <li> <p>Use <code>poetry run poe lint</code> to run linters manually, add <code>--all-files</code> to check everything.</p> </li> <li> <p>Use <code>poetry run poe test</code> to run tests, add <code>--cov</code> to also show test coverage.</p> </li> <li> <p>Use <code>poetry run poe docs</code> to generate local documentation</p> </li> </ul> <p>In order to contribute code, please open a pull request to the <code>dev</code> branch.</p> <p>Before opening the PR, please make sure that your changes</p> <ul> <li>are sufficiently covered by meaningful tests,</li> <li>are reflected in suitable documentation (API docs, guides, etc.), and</li> <li>successfully pass all pre-commit hooks.</li> </ul>"},{"location":"coverage/","title":"Coverage Report","text":""},{"location":"credits/","title":"Authors and Contributors","text":"<p>Main authors are persons whose contributions significantly shaped the state of the software at some point in time.</p> <p>Additional contributors are persons who are not main authors, but contributed non-trivially to this project, e.g. by providing smaller fixes and enhancements to the code and/or documentation.</p> <p>Of course, this is just a rough overview and categorization. For a more complete overview of all contributors and contributions, please inspect the git history of this repository.</p>"},{"location":"credits/#main-authors","title":"Main Authors","text":"<ul> <li>Mustafa Soylu (   E-Mail,   ORCID   ): original author</li> </ul>"},{"location":"credits/#additional-contributors","title":"Additional Contributors","text":"<ul> <li> <p>Anton Pirogov (   E-Mail,   ORCID   ): documentation, review, and ideas</p> </li> <li> <p>Jens Br\u00f6der (   E-Mail,   ORCID   ): ideas</p> </li> </ul> <p>... maybe you?</p>"},{"location":"dev_guide/","title":"Developer Guide","text":"<p>This guide is targeting mainly developers, maintainers and other technical contributors and provides more information on how to work with this repository.</p>"},{"location":"dev_guide/#overview","title":"Overview","text":""},{"location":"dev_guide/#repository-structure","title":"Repository Structure","text":"<p>Here is a non-exhaustive list of the most important files and directories in the repository.</p> <p>General:</p> <ul> <li><code>AUTHORS.md</code>: acknowledges and lists all contributors</li> <li><code>CHANGELOG.md</code>: summarizes the changes for each version of the software for users</li> <li><code>CODE_OF_CONDUCT.md</code>: defines the social standards that must be followed by contributors</li> <li><code>CONTRIBUTING.md</code>: explains  how others can contribute to the project</li> <li><code>README.md</code>: provides an overview and points to other resources</li> </ul> <p>Metadata:</p> <ul> <li><code>CITATION.cff</code>: metadata stating how to cite the project</li> <li><code>codemeta.json</code>: metadata for harvesting by other tools and services</li> <li><code>LICENSE</code>: the (main) license of the project</li> <li><code>LICENSES</code>: copies of all licenses that apply to files in the project</li> <li><code>.reuse/dep5</code>: granular license and copyright information for all files and directories</li> </ul> <p>Development:</p> <ul> <li><code>pyproject.toml</code>: project metadata, dependencies, development tool configurations</li> <li><code>poetry.lock</code>: needed for reproducible installation of the project</li> <li><code>src</code>: actual code provided by the project</li> <li><code>tests</code>: all tests for the code in the project</li> <li><code>mkdocs.yml</code>: configuration of the project website</li> <li><code>docs</code>: most contents used for the project website</li> </ul> <p>Automation and Quality Control:</p> <ul> <li><code>.pre-commit-config.yaml</code>: quality assurance tools used in the project</li> <li><code>.github/workflows</code>: CI scripts for GitHub (QA, documentation and package deployment)</li> <li><code>.github/ISSUE_TEMPLATE</code>: templates for the GitHub issue tracker</li> <li><code>.gitlab-ci.yml</code>: mostly equivalent CI scripts, but for GitLab</li> <li><code>.gitlab/issue_templates</code>: The same issues templates, but for GitLab</li> </ul>"},{"location":"dev_guide/#used-tools","title":"Used Tools","text":"<p>Here is a non-exhaustive list of the most important tools used in the project.</p> <p>Best practices for modern Python development are implemented by using:</p> <ul> <li><code>poetry</code> for dependency management and packaging</li> <li><code>pytest</code> for unit testing</li> <li><code>hypothesis</code> for property-based testing</li> <li><code>pre-commit</code> for orchestrating linters, formatters and other utilities</li> <li><code>black</code> for source-code formatting</li> <li><code>autoflake</code> for automatically removing unused imports</li> <li><code>flake8</code> for general linting (using various linter plugins)</li> <li><code>pydocstyle</code> for checking docstring conventions</li> <li><code>interrogate</code> for computing docstring coverage</li> <li><code>mypy</code> for editor-independent type-checking</li> <li><code>mkdocs</code> for generating the project documentation website</li> <li><code>bandit</code> for checking security issues in the code</li> <li><code>safety</code> for checking security issues in the current dependencies</li> </ul> <p>Metadata best practices for FAIR software are implemented using:</p> <ul> <li><code>cffconvert</code> to check the <code>CITATION.cff</code> (citation metadata)</li> <li><code>codemetapy</code> to generate a <code>codemeta.json</code> (general software metadata)</li> <li><code>reuse</code> to check REUSE-compliance (granular copyright and license metadata)</li> <li><code>licensecheck</code> to scan for possible license incompatibilities in the dependencies</li> </ul>"},{"location":"dev_guide/#basics","title":"Basics","text":"<p>The project</p> <ul> <li>heavily uses <code>pyproject.toml</code>, which is a recommended standard</li> <li>adopts the <code>src</code> layout, to avoid common problems</li> <li>keeps the actual code (<code>src</code>) and test code (<code>tests</code>) separated</li> </ul> <p>The <code>pyproject.toml</code> is the main configuration file for the project. It contains both general information about the software as well as configuration for various tools.</p> <p>In older software, most of this information is often scattered over many little tool-specific configuration files and a <code>setup.py</code>, <code>setup.cfg</code> and/or <code>requirements.txt</code> file.</p> <p>In this project, <code>pyproject.toml</code> is the first place that should be checked when looking for the configuration of some development tool.</p>"},{"location":"dev_guide/#configuration","title":"Configuration","text":"<p>The main tool needed to manage and configure the project is Poetry.</p> <p>Please follow its setup documentation to install it correctly. Poetry should not be installed with <code>pip</code> like other Python tools.</p> <p>Poetry performs many important tasks:</p> <ul> <li>it manages the virtual environment(s) used for the project</li> <li>it manages all the dependencies needed for the code to work</li> <li>it takes care of packaging the code into a <code>pip</code>-installable package</li> </ul> <p>You can find a cheatsheet with the most important commands here and consult its official documentation for detailed information.</p> <p>Note that <code>poetry</code> is only needed for development of the repository. The end-users who just want to install and use this project do not need to set up or know anything about poetry.</p> <p>Note that if you use <code>poetry shell</code> and the project is installed with <code>poetry install</code>, in the following you do not have to prepend <code>poetry run</code> to commands you will see below.</p>"},{"location":"dev_guide/#task-runner","title":"Task Runner","text":"<p>It is a good practice to have a common way for launching different project-related tasks. It removes the need of remembering flags for various tools, and avoids duplication of the same commands in the CI pipelines. If something in a workflow needs to change, it can be changed in just one place, thus reducing the risk of making a mistake.</p> <p>Often projects use a shell script or <code>Makefile</code> for this purpose. This project uses poethepoet, as it integrates nicely with <code>poetry</code>. The tasks are defined in <code>pyproject.toml</code> and can be launched using:</p> <pre><code>poetry run poe TASK_NAME\n</code></pre>"},{"location":"dev_guide/#ci-workflows","title":"CI Workflows","text":"<p>The project contains CI workflows for both GitHub and GitLab.</p> <p>The main CI pipeline runs on each new pushed commit and will</p> <ol> <li>Run all configured code analysis tools,</li> <li>Run code tests with multiple versions of Python,</li> <li>build and deploy the online project documentation website, and</li> <li>if a new version tag was pushed, launch the release workflow</li> </ol>"},{"location":"dev_guide/#quality-control","title":"Quality Control","text":""},{"location":"dev_guide/#static-analysis","title":"Static Analysis","text":"<p>Except for code testing, most tools for quality control are added to the project as <code>pre-commit</code> hooks. The <code>pre-commit</code> tool takes care of installing, updating and running the tools according to the configuration in the <code>.pre-commit-config.yaml</code> file.</p> <p>For every new copy of the repository (e.g. after <code>git clone</code>), <code>pre-commit</code> first must be activated. This is usually done using <code>pre-commit install</code>, which also requires that <code>pre-commit</code> is already available. For more convenience, we simplified the procedure.</p> <p>In this project, you can run:</p> <pre><code>poetry run poe init-dev\n</code></pre> <p>This will make sure that <code>pre-commit</code> is enabled in your repository copy.</p> <p>Once enabled, every time you try to <code>git commit</code> some changed files various tools will run on those (and only those) files.</p> <p>This means that (with some exceptions) <code>pre-commit</code> by default will run only on the changed files that were added to the next commit (i.e., files in the git staging area). These files are usually colored in green when running <code>git status</code>.</p> <ul> <li>Some tools only report the problems they detected</li> <li>Some tools actively modify files (e.g., fix formatting)</li> </ul> <p>In any case, the <code>git commit</code> will fail if a file was modified by a tool, or some problems were reported. In order to complete the commit, you need to</p> <ul> <li>resolve all problems (by fixing them or marking them as false alarm), and</li> <li><code>git add</code> all changed files again (to update the files in the staging area).</li> </ul> <p>After doing that, you can retry to <code>git commit</code> your changes.</p> <p>To avoid having to deal with many issues at once, it is a good habit to run <code>pre-commit</code> by hand from time to time. In this project, this can be done with:</p> <pre><code>poetry run poe lint --all-files\n</code></pre>"},{"location":"dev_guide/#testing","title":"Testing","text":"<p>pytest is used as the main framework for testing.</p> <p>The project uses the <code>pytest-cov</code> plugin to integrate <code>pytest</code> with <code>coverage</code>, which collects and reports test coverage information.</p> <p>In addition to writing regular unit tests with <code>pytest</code>, consider using hypothesis, which integrates nicely with <code>pytest</code> and implements property-based testing - which involves automatic generation of randomized inputs for test cases. This can help to find bugs often found for various edge cases that are easy to overlook in ad-hoc manual tests. Such randomized tests can be a good addition to hand-crafted tests and inputs.</p> <p>To run all tests, either invoke <code>pytest</code> directly, or use the provided task:</p> <pre><code>poetry run poe test\n</code></pre>"},{"location":"dev_guide/#documentation","title":"Documentation","text":"<p>The project uses <code>mkdocs</code> with the popular and excellent <code>mkdocs-material</code> theme to generate the project documentation website, which provides both user and developer documentation.</p> <p><code>mkdocs</code> is configured in the <code>mkdocs.yml</code> file, which we prepared in a way that there is</p> <ul> <li>no need to duplicate sections from files in other places (such as <code>README.md</code>)</li> <li>fully automatic API documentation pages based on Python docstrings in the code</li> <li>a detailed test coverage report is included in the website</li> </ul> <p>The first point is important, because avoiding duplication means avoiding errors whenever text or examples are updated. The second point is convenient, as modules and functions do not need to be added by hand, which is easy to forget. The third point removes the need to use an external service such as CodeCov to store and present code coverage information.</p> <p>As software changes over time and users cannot always keep up with the latest developments, each new version of the software should provide version-specific documentation. To make this both possible as well as convenient, this project uses <code>mike</code> to generate and manage the <code>mkdocs</code> documentation for different versions of the software.</p>"},{"location":"dev_guide/#online-documentation","title":"Online Documentation","text":"<p>To avoid dependence on additional services such as readthedocs, the project website is deployed using GitHub Pages.</p> <p>The provided CI pipeline automatically generates the documentation for the latest development version (i.e., current state of the <code>main</code> branch) as well as every released version (i.e., marked by a version tag <code>vX.Y.Z</code>).</p>"},{"location":"dev_guide/#offline-documentation","title":"Offline Documentation","text":"<p>You can manually generate a local and fully offline copy of the documentation, which can be useful for e.g. previewing the results during active work on the documentation:</p> <pre><code>poetry install --with docs\npoetry run poe docs\n</code></pre> <p>Once the documentation site is built, run <code>mkdocs serve</code> and open <code>https://localhost:8000</code> in your browser to see the local copy of the website.</p>"},{"location":"dev_guide/#releases","title":"Releases","text":"<p>From time to time the project is ready for a new release for users.</p>"},{"location":"dev_guide/#creating-a-new-release","title":"Creating a New Release","text":"<p>Before releasing a new version, push the commit the new release should be based on to the upstream repository, and make sure that:</p> <ul> <li>the CI pipeline completes successfully</li> <li>the version number in <code>pyproject.toml</code> is updated, in particular:</li> <li>it must be larger than the previous released version</li> <li>it should adequately reflect the severity of changes</li> <li>the provided user and developer documentation is up-to-date, including:</li> <li>a new section in the <code>CHANGELOG.md</code> file summarizing changes in the new version</li> <li>possibly revised information about contributors and/or maintainers</li> </ul> <p>If this is the case, proceed with the release by:</p> <ul> <li>creating a new tag that matches the version in the <code>pyproject.toml</code>: <code>git tag vX.Y.Z</code></li> <li>pushing the new tag to the upstream repository: <code>git push origin vX.Y.Z</code></li> </ul> <p>The pushed version tag will trigger a pipeline that will:</p> <ul> <li>build and deploy the documentation website for the specific version</li> <li>publish the package to enabled targets (see below)</li> </ul>"},{"location":"dev_guide/#release-targets","title":"Release Targets","text":"<p>Targets for releases can be enabled or disabled in <code>.github/workflows/ci.yml</code> and configured by adapting the corresponding actions in <code>.github/workflows/releases.yml</code>.</p>"},{"location":"dev_guide/#github-release","title":"Github Release","text":"<p>By default, the release workflow will create a basic Github Release that provides a snapshot of the repository as a download. This requires no additional configuration.</p> <p>See here for information on how the Github release can be customized.</p> <p>Note that this release target is mostly for demonstration purposes. For most Python projects, using PyPI is the recommended primary distribution method.</p>"},{"location":"dev_guide/#pypi-and-compatible-package-indices","title":"PyPI (and compatible package indices)","text":"<p>For releases to PyPI and Test PyPI the project uses the new Trusted Publishers workflow that is both more secure and convenient to use than other authorization methods.</p> <p>Before the project can be released to PyPI or Test PyPI the first time, first a pending publisher must be added in the PyPI account of the main project maintainer, using <code>release.yml</code> as the requested workflow name.</p> <p>Once this is done, set the corresponding option (<code>to_pypi</code> / <code>to_test_pypi</code>) to <code>true</code> in the <code>publish</code> job in <code>ci.yml</code> to enable the corresponding publication target.</p> <p>If the old and less secure token-based authentication method is needed or the package should be published to a different PyPI-compatible package index, please adapt <code>release.yml</code> accordingly).</p>"},{"location":"license/","title":"License","text":"<p>Unless stated otherwise, all code provided by this project (excluding external dependencies) is distributed under the following license:</p> <pre><code>MIT License\n\nCopyright (c) 2023 Forschungszentrum J\u00fclich GmbH - Institute Materials Data Science and Informatics (IAS9) - Stefan Sandfeld (s.sandfeld@fz-juelich.de)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>This project is REUSE compliant. The following detailed license and copyright information in DEP5 format can also be found in the <code>.reuse/dep5</code> file in the project source directory:</p> <pre><code>Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\nUpstream-Name: somesy\nUpstream-Contact: Mustafa Soylu &lt;m.soylu@fz-juelich.de&gt;\nSource: https://github.com/Materials-Data-Science-and-Informatics/somesy\n\nFiles: .gitignore pyproject.toml poetry.lock .pre-commit-config.yaml codemeta.json CITATION.cff README.md RELEASE_NOTES.md CHANGELOG.md CODE_OF_CONDUCT.md AUTHORS.md CONTRIBUTING.md .gitlab-ci.yml .gitlab/* .github/* mkdocs.yml docs/*\nCopyright: 2023 Forschungszentrum J\u00fclich GmbH - Institute Materials Data Science and Informatics (IAS9) - Stefan Sandfeld (s.sandfeld@fz-juelich.de)\nLicense: CC0-1.0\n\nFiles: src/somesy/* tests/*\nCopyright: 2023 Forschungszentrum J\u00fclich GmbH - Institute Materials Data Science and Informatics (IAS9) - Stefan Sandfeld (s.sandfeld@fz-juelich.de)\nLicense: MIT\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#getting-started","title":"Getting Started","text":""},{"location":"quickstart/#installing-somesy","title":"Installing somesy","text":"<p>Somesy requires Python <code>&gt;=3.8</code>. You can install the package just as any other package into your current Python environment using:</p> <pre><code>$ pip install git+ssh://git@github.com:Materials-Data-Science-and-Informatics/somesy.git\n</code></pre> <p>or, if you are adding it as a dependency into a poetry project:</p> <pre><code>$ poetry add git+ssh://git@github.com:Materials-Data-Science-and-Informatics/somesy.git\n</code></pre>"},{"location":"quickstart/#use-as-a-cli-tool","title":"Use as a CLI tool","text":"<p>After the installation with pip, you can use somesy as a CLI tool. <code>somesy sync</code> command checks input file in the working directory by default. <code>.somesy.toml</code> and <code>pyproject.toml</code> is checked as input files, ordinarily. Currently, there are 2 output methods for <code>somesy sync</code> command, <code>CITATION.cff</code> and <code>pyproject.toml</code> (either in poetry or setuptools format), and both are synced by default. <code>CITATION.cff</code> is created if file does not exists but <code>pyproject.toml</code> have to be created beforehand either in poetry or setuptools format. You can disable either output by CLI options.</p> Command Option Option input Description somesy --version, -v - Get somesy version somesy sync --input-file, -i input file path set input file somesy sync --no-sync-cff, -C - Do not sync CITATION.cff file somesy sync --cff-file, -c cff file path set CITATION.cff file to sync somesy sync --no-sync-pyproject, -P - Do not sync pyproject file somesy sync --pyproject-file, -p pyproject file path set pyproject file to sync somesy sync --show-info, -s - show basic information messages somesy sync --verbose, -v - show verbose messages somesy sync --debug, -d - show debug messages, overrides verbose <p><code>somesy</code> is designed to be used as a pre-commit tool so it does not give any output unless there is an error or one of the related flags is set. Also, <code>somesy</code> will give an error if there is no output to sync.</p>"},{"location":"quickstart/#use-as-a-pre-commit-hook","title":"Use as a Pre-commit hook","text":"<p><code>somesy</code> can be used as a pre-commit hook. A pre-commit hook runs on every commit to automatically point out issues and/or fixing them. Thus, <code>somesy</code> syncs your data in every commit in a deterministic way. If you already use pre-commit, you can add somesy as a pre-commit hook. For people who are new to pre-commit, you can create a .pre-commit-config.yaml file in the root folder of your repository. You can set CLI options in <code>args</code> as in the example below.</p> <pre><code>repos:\n- repo: https://github.com/Materials-Data-Science-and-Informatics/somesy\nrev: \"0.1.0\"\nhooks:\n- id: somesy\nargs: [\"-C\", \"-p\", \"~/xx/xx/pyproject.toml\"]\n</code></pre>"},{"location":"quickstart/#somesy-input-file","title":"Somesy input file","text":"<p>This repository has a <code>.somesy.toml</code> file that can be used as a example. You can check this additional example for somesy project metadata inputs. Please pay attention to the toml table titles for each file example, the input itself is the same.</p> <p>.somesy.toml example:</p> <pre><code>[project]\nname = \"test\"\nversion = \"0.1.0\"\ndescription = \"Test description.\"\nauthors = [\n{family-names = \"Doe\", given-names= \"John\", email = \"test@test.test\", orcid = \"https://orcid.org/0000-0001-2345-5678\", contribution = \"The main author, maintainer and tester.\", contribution_begin = \"2023-03-01\", contribution_type = \"code\"}\n]\nmaintainers = [\n{family-names = \"Doe\", given-names= \"John\", email = \"test@test.test\", orcid = \"https://orcid.org/0000-0001-2345-5678\", contribution = \"The main author, maintainer and tester.\", contribution_begin = \"2023-03-01\", contribution_type = \"code\"}\n]\ncontributors = [\n[\n{family-names = \"Doe\", given-names= \"John\", email = \"test@test.test\", orcid = \"https://orcid.org/0000-0001-2345-5678\", contribution = \"The main author, maintainer and tester.\", contribution_begin = \"2023-03-01\", contribution_type = \"code\"},\n{family-names = \"Dow\", given-names= \"John\", email = \"test2@test.test\", orcid = \"https://orcid.org/0000-0012-3456-7890\", contribution = \"Reviewer\", contribution_begin = \"2023-03-01\", contribution_type = \"review\"}\n]\nkeywords = [\"key\", \"word\"]\nlicense = \"MIT\"\nrepository = \"https://github.com/xx/test\"\nhomepage = \"https://xx.github.io/test\"\n</code></pre> <p>pyproject.toml example:</p> <pre><code>[tool.somesy.project]\nname = \"test\"\nversion = \"0.1.0\"\ndescription = \"Test description.\"\nauthors = [\n{family-names = \"Doe\", given-names= \"John\", email = \"test@test.test\", orcid = \"https://orcid.org/0000-0001-2345-5678\", contribution = \"The main author, maintainer and tester.\", contribution_begin = \"2023-03-01\", contribution_type = \"code\"}\n]\nmaintainers = [\n{family-names = \"Doe\", given-names= \"John\", email = \"test@test.test\", orcid = \"https://orcid.org/0000-0001-2345-5678\", contribution = \"The main author, maintainer and tester.\", contribution_begin = \"2023-03-01\", contribution_type = \"code\"}\n]\ncontributors = [\n[\n{family-names = \"Doe\", given-names= \"John\", email = \"test@test.test\", orcid = \"https://orcid.org/0000-0001-2345-5678\", contribution = \"The main author, maintainer and tester.\", contribution_begin = \"2023-03-01\", contribution_type = \"code\"},\n{family-names = \"Dow\", given-names= \"John\", email = \"test2@test.test\", orcid = \"https://orcid.org/0000-0012-3456-7890\", contribution = \"Reviewer\", contribution_begin = \"2023-03-01\", contribution_type = \"review\"}\n]\nkeywords = [\"key\", \"word\"]\nlicense = \"MIT\"\nrepository = \"https://github.com/xx/test\"\nhomepage = \"https://xx.github.io/test\"\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>somesy<ul> <li>cff<ul> <li>core</li> <li>utils</li> <li>validate</li> </ul> </li> <li>commands<ul> <li>sync</li> </ul> </li> <li>core<ul> <li>config</li> <li>core</li> <li>discover</li> <li>models</li> <li>utils</li> </ul> </li> <li>main</li> <li>pyproject<ul> <li>core</li> <li>models</li> <li>poetry</li> <li>setuptools</li> <li>utils</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/somesy/","title":"somesy","text":"<p>somesy package.</p>"},{"location":"reference/somesy/main/","title":"main","text":"<p>Main entry point for the somesy CLI.</p>"},{"location":"reference/somesy/main/#somesy.main.version_callback","title":"version_callback","text":"<pre><code>version_callback(value: bool)\n</code></pre> <p>Print version information.</p> Source code in <code>src/somesy/main.py</code> <pre><code>def version_callback(value: bool):\n\"\"\"Print version information.\"\"\"\n    if value:\n        typer.echo(f\"somesy version: {__version__}\")\n        raise typer.Exit()\n</code></pre>"},{"location":"reference/somesy/main/#somesy.main.common","title":"common","text":"<pre><code>common(\n    ctx: typer.Context,\n    version: bool = typer.Option(\n        None, \"--version\", \"-v\", callback=version_callback\n    ),\n)\n</code></pre> <p>Response for version information.</p> Source code in <code>src/somesy/main.py</code> <pre><code>@app.callback()\ndef common(\n    ctx: typer.Context,\n    version: bool = typer.Option(None, \"--version\", \"-v\", callback=version_callback),\n):\n\"\"\"Response for version information.\"\"\"\n</code></pre>"},{"location":"reference/somesy/main/#somesy.main.sync","title":"sync","text":"<pre><code>sync(\n    input_file: Path = typer.Option(\n        Path(\".somesy.toml\"),\n        \"--input-file\",\n        \"-i\",\n        exists=False,\n        file_okay=True,\n        dir_okay=False,\n        writable=True,\n        readable=True,\n        resolve_path=True,\n        help=\"Somesy input file path\",\n    ),\n    no_sync_cff: bool = typer.Option(\n        False,\n        \"--no-sync-cff\",\n        \"-C\",\n        help=\"Do not sync CITATION.cff file\",\n    ),\n    cff_file: Path = typer.Option(\n        Path(\"CITATION.cff\"),\n        \"--cff-file\",\n        \"-c\",\n        exists=False,\n        file_okay=True,\n        dir_okay=False,\n        writable=True,\n        readable=True,\n        resolve_path=True,\n        help=\"CITATION.cff file path\",\n    ),\n    no_sync_pyproject: bool = typer.Option(\n        False,\n        \"--no-sync-pyproject\",\n        \"-P\",\n        help=\"Do not sync pyproject.toml file\",\n    ),\n    pyproject_file: Path = typer.Option(\n        Path(\"pyproject.toml\"),\n        \"--pyproject-file\",\n        \"-p\",\n        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        writable=True,\n        readable=True,\n        resolve_path=True,\n        help=\"Existing pyproject.toml file path\",\n    ),\n    show_info: bool = typer.Option(\n        False,\n        \"--show-info\",\n        \"-s\",\n        help=\"Get basic output (somesy is quiet by default)\",\n    ),\n    verbose: bool = typer.Option(\n        False, \"--verbose\", \"-v\", help=\"Verbose output\"\n    ),\n    debug: bool = typer.Option(\n        False, \"--debug\", \"-d\", help=\"Debug output\"\n    ),\n)\n</code></pre> <p>Sync project metadata input with metadata files.</p> Source code in <code>src/somesy/main.py</code> <pre><code>@app.command()\ndef sync(\n    input_file: Path = typer.Option(\n        Path(\".somesy.toml\"),\n        \"--input-file\",\n        \"-i\",\n        exists=False,\n        file_okay=True,\n        dir_okay=False,\n        writable=True,\n        readable=True,\n        resolve_path=True,\n        help=\"Somesy input file path\",\n    ),\n    no_sync_cff: bool = typer.Option(\n        False,\n        \"--no-sync-cff\",\n        \"-C\",\n        help=\"Do not sync CITATION.cff file\",\n    ),\n    cff_file: Path = typer.Option(\n        Path(\"CITATION.cff\"),\n        \"--cff-file\",\n        \"-c\",\n        exists=False,\n        file_okay=True,\n        dir_okay=False,\n        writable=True,\n        readable=True,\n        resolve_path=True,\n        help=\"CITATION.cff file path\",\n    ),\n    no_sync_pyproject: bool = typer.Option(\n        False,\n        \"--no-sync-pyproject\",\n        \"-P\",\n        help=\"Do not sync pyproject.toml file\",\n    ),\n    pyproject_file: Path = typer.Option(\n        Path(\"pyproject.toml\"),\n        \"--pyproject-file\",\n        \"-p\",\n        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        writable=True,\n        readable=True,\n        resolve_path=True,\n        help=\"Existing pyproject.toml file path\",\n    ),\n    show_info: bool = typer.Option(\n        False,\n        \"--show-info\",\n        \"-s\",\n        help=\"Get basic output (somesy is quiet by default)\",\n    ),\n    verbose: bool = typer.Option(\n        False,\n        \"--verbose\",\n        \"-v\",\n        help=\"Verbose output\",\n    ),\n    debug: bool = typer.Option(\n        False,\n        \"--debug\",\n        \"-d\",\n        help=\"Debug output\",\n    ),\n):\n\"\"\"Sync project metadata input with metadata files.\"\"\"\n    set_logger(debug=debug, verbose=verbose, info=show_info)\n    # at least one of the sync options must be enabled\n    if no_sync_cff and no_sync_pyproject:\n        logger.warning(\"There should be at least one file to sync.\")\n        typer.Exit(code=0)\n\n    try:\n        logger.info(\"[bold green]Syncing project metadata...[/bold green]\\n\")\n        logger.debug(\n            f\"CLI arguments:\\n{input_file=}, {no_sync_cff=}, {cff_file=}, {no_sync_pyproject=}, {pyproject_file=}, {verbose=}, {debug=}\"\n        )\n\n        # check if input file exists, if not, try to find it from default list\n        input_file = discover_input(input_file)\n\n        # info output\n        logger.info(\"Files to sync:\")\n        if not no_sync_pyproject:\n            logger.info(\n                f\"  - [italic]Pyproject.toml[/italic] [grey]({pyproject_file})[/grey]\"\n            )\n\n        if not no_sync_cff:\n            logger.info(f\"  - [italic]CITATION.cff[/italic] [grey]({cff_file})[/grey]\")\n\n        # sync files\n        sync_command(\n            input_file=input_file,\n            pyproject_file=pyproject_file if not no_sync_pyproject else None,\n            cff_file=cff_file if not no_sync_cff else None,\n        )\n\n        logger.info(\"[bold green]Syncing completed.[/bold green]\")\n    except Exception as e:\n        logger.error(f\"[bold red]Error: {e}[/bold red]\")\n        logger.debug(f\"[red]{traceback.format_exc()}[/red]\")\n        raise typer.Exit(code=1)\n</code></pre>"},{"location":"reference/somesy/cff/","title":"cff","text":"<p>CFF module.</p>"},{"location":"reference/somesy/cff/#somesy.cff.CFF","title":"CFF","text":"<p>         Bases: <code>ProjectMetadataWriter</code></p> <p>Citation File Format (CFF) parser and saver.</p> Source code in <code>src/somesy/cff/core.py</code> <pre><code>class CFF(ProjectMetadataWriter):\n\"\"\"Citation File Format (CFF) parser and saver.\"\"\"\n\n    def __init__(\n        self,\n        path: Path,\n        create_if_not_exists: bool = True,\n    ):\n\"\"\"Citation File Format (CFF) parser.\n\n        Args:\n            path (Path): File path to the CFF file.\n            create_if_not_exists (bool, optional): Create an empty CFF file if not exists. Defaults to True.\n        \"\"\"\n        self.path = path\n        self.create_if_not_exists = create_if_not_exists\n        self._yaml = YAML()\n        self._yaml.preserve_quotes = True\n\n        # load and validate the CFF file\n        self._load()\n        self._validate()\n\n    def _load(self):\n\"\"\"Load the CFF file.\"\"\"\n        if not self.path.exists():\n            if self.create_if_not_exists:\n                self._create_empty_file()\n                self._data = {}\n                self._data[\"cff-version\"] = \"1.2.0\"\n                self._data[\n                    \"message\"\n                ] = \"If you use this software, please cite it using these metadata.\"\n                self._data[\"type\"] = \"software\"\n                self._data[\"title\"] = \"placeholder\"\n                self._data[\"authors\"] = [{\"given-names\": \"placeholder\"}]\n                with open(self.path, \"w\") as f:\n                    self._yaml.dump(self._data, f)\n            else:\n                raise FileNotFoundError(f\"CFF file {self.path} not found\")\n        else:\n            with open(self.path) as f:\n                self._data = self._yaml.load(f)\n\n    def _validate(self):\n\"\"\"Validate the CFF file.\"\"\"\n        validate_citation(self.path)\n\n    @property\n    def name(self) -&gt; str:\n\"\"\"Project name.\"\"\"\n        return self._get_property(\"title\")\n\n    @name.setter\n    def name(self, name: str) -&gt; None:\n\"\"\"Set project name.\"\"\"\n        self._set_property(\"title\", name)\n\n    @property\n    def description(self) -&gt; Optional[str]:\n\"\"\"Project description.\"\"\"\n        return self._get_property(\"abstract\")\n\n    @description.setter\n    def description(self, description: str) -&gt; None:\n\"\"\"Set project description.\"\"\"\n        self._set_property(\"abstract\", description)\n\n    @property\n    def authors(self) -&gt; List[str]:\n\"\"\"Project authors.\"\"\"\n        return self._get_property(\"authors\")\n\n    @authors.setter\n    def authors(self, authors: List[Person]) -&gt; None:\n\"\"\"Set project authors.\"\"\"\n        self._set_property(\n            \"authors\", [person_to_cff_dict(author) for author in authors]\n        )\n\n    @property\n    def maintainers(self) -&gt; Optional[List[str]]:\n\"\"\"Project maintainers.\"\"\"\n        return self._get_property(\"contact\")\n\n    @maintainers.setter\n    def maintainers(self, maintainers: Optional[List[Person]] = None) -&gt; None:\n\"\"\"Set project maintainers.\"\"\"\n        if maintainers is None:\n            return\n        self._set_property(\n            \"contact\", [person_to_cff_dict(maintainer) for maintainer in maintainers]\n        )\n\n    @property\n    def homepage(self) -&gt; Optional[str]:\n\"\"\"Project homepage url.\"\"\"\n        return self._get_property(\"url\")\n\n    @homepage.setter\n    def homepage(self, homepage: Optional[str]) -&gt; None:\n\"\"\"Set project homepage url.\"\"\"\n        self._set_property(\"url\", homepage)\n\n    @property\n    def repository(self) -&gt; Optional[str]:\n\"\"\"Project repository url.\"\"\"\n        return self._get_property(\"repository-code\")\n\n    @repository.setter\n    def repository(self, repository: Optional[str]) -&gt; None:\n\"\"\"Set project repository url.\"\"\"\n        self._set_property(\"repository-code\", repository)\n\n    def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the CFF object to a file.\"\"\"\n        if path:\n            self._yaml.dump(self._data, path)\n        else:\n            self._yaml.dump(self._data, self.path)\n</code></pre>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.name","title":"name  <code>writable</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Project name.</p>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.description","title":"description  <code>writable</code> <code>property</code>","text":"<pre><code>description: Optional[str]\n</code></pre> <p>Project description.</p>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.authors","title":"authors  <code>writable</code> <code>property</code>","text":"<pre><code>authors: List[str]\n</code></pre> <p>Project authors.</p>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.maintainers","title":"maintainers  <code>writable</code> <code>property</code>","text":"<pre><code>maintainers: Optional[List[str]]\n</code></pre> <p>Project maintainers.</p>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.homepage","title":"homepage  <code>writable</code> <code>property</code>","text":"<pre><code>homepage: Optional[str]\n</code></pre> <p>Project homepage url.</p>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.repository","title":"repository  <code>writable</code> <code>property</code>","text":"<pre><code>repository: Optional[str]\n</code></pre> <p>Project repository url.</p>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.__init__","title":"__init__","text":"<pre><code>__init__(path: Path, create_if_not_exists: bool = True)\n</code></pre> <p>Citation File Format (CFF) parser.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>File path to the CFF file.</p> required <code>create_if_not_exists</code> <code>bool</code> <p>Create an empty CFF file if not exists. Defaults to True.</p> <code>True</code> Source code in <code>src/somesy/cff/core.py</code> <pre><code>def __init__(\n    self,\n    path: Path,\n    create_if_not_exists: bool = True,\n):\n\"\"\"Citation File Format (CFF) parser.\n\n    Args:\n        path (Path): File path to the CFF file.\n        create_if_not_exists (bool, optional): Create an empty CFF file if not exists. Defaults to True.\n    \"\"\"\n    self.path = path\n    self.create_if_not_exists = create_if_not_exists\n    self._yaml = YAML()\n    self._yaml.preserve_quotes = True\n\n    # load and validate the CFF file\n    self._load()\n    self._validate()\n</code></pre>"},{"location":"reference/somesy/cff/#somesy.cff.core.CFF.save","title":"save","text":"<pre><code>save(path: Optional[Path] = None) -&gt; None\n</code></pre> <p>Save the CFF object to a file.</p> Source code in <code>src/somesy/cff/core.py</code> <pre><code>def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the CFF object to a file.\"\"\"\n    if path:\n        self._yaml.dump(self._data, path)\n    else:\n        self._yaml.dump(self._data, self.path)\n</code></pre>"},{"location":"reference/somesy/cff/core/","title":"core","text":"<p>Citation File Format (CFF) parser and saver.</p>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF","title":"CFF","text":"<p>         Bases: <code>ProjectMetadataWriter</code></p> <p>Citation File Format (CFF) parser and saver.</p> Source code in <code>src/somesy/cff/core.py</code> <pre><code>class CFF(ProjectMetadataWriter):\n\"\"\"Citation File Format (CFF) parser and saver.\"\"\"\n\n    def __init__(\n        self,\n        path: Path,\n        create_if_not_exists: bool = True,\n    ):\n\"\"\"Citation File Format (CFF) parser.\n\n        Args:\n            path (Path): File path to the CFF file.\n            create_if_not_exists (bool, optional): Create an empty CFF file if not exists. Defaults to True.\n        \"\"\"\n        self.path = path\n        self.create_if_not_exists = create_if_not_exists\n        self._yaml = YAML()\n        self._yaml.preserve_quotes = True\n\n        # load and validate the CFF file\n        self._load()\n        self._validate()\n\n    def _load(self):\n\"\"\"Load the CFF file.\"\"\"\n        if not self.path.exists():\n            if self.create_if_not_exists:\n                self._create_empty_file()\n                self._data = {}\n                self._data[\"cff-version\"] = \"1.2.0\"\n                self._data[\n                    \"message\"\n                ] = \"If you use this software, please cite it using these metadata.\"\n                self._data[\"type\"] = \"software\"\n                self._data[\"title\"] = \"placeholder\"\n                self._data[\"authors\"] = [{\"given-names\": \"placeholder\"}]\n                with open(self.path, \"w\") as f:\n                    self._yaml.dump(self._data, f)\n            else:\n                raise FileNotFoundError(f\"CFF file {self.path} not found\")\n        else:\n            with open(self.path) as f:\n                self._data = self._yaml.load(f)\n\n    def _validate(self):\n\"\"\"Validate the CFF file.\"\"\"\n        validate_citation(self.path)\n\n    @property\n    def name(self) -&gt; str:\n\"\"\"Project name.\"\"\"\n        return self._get_property(\"title\")\n\n    @name.setter\n    def name(self, name: str) -&gt; None:\n\"\"\"Set project name.\"\"\"\n        self._set_property(\"title\", name)\n\n    @property\n    def description(self) -&gt; Optional[str]:\n\"\"\"Project description.\"\"\"\n        return self._get_property(\"abstract\")\n\n    @description.setter\n    def description(self, description: str) -&gt; None:\n\"\"\"Set project description.\"\"\"\n        self._set_property(\"abstract\", description)\n\n    @property\n    def authors(self) -&gt; List[str]:\n\"\"\"Project authors.\"\"\"\n        return self._get_property(\"authors\")\n\n    @authors.setter\n    def authors(self, authors: List[Person]) -&gt; None:\n\"\"\"Set project authors.\"\"\"\n        self._set_property(\n            \"authors\", [person_to_cff_dict(author) for author in authors]\n        )\n\n    @property\n    def maintainers(self) -&gt; Optional[List[str]]:\n\"\"\"Project maintainers.\"\"\"\n        return self._get_property(\"contact\")\n\n    @maintainers.setter\n    def maintainers(self, maintainers: Optional[List[Person]] = None) -&gt; None:\n\"\"\"Set project maintainers.\"\"\"\n        if maintainers is None:\n            return\n        self._set_property(\n            \"contact\", [person_to_cff_dict(maintainer) for maintainer in maintainers]\n        )\n\n    @property\n    def homepage(self) -&gt; Optional[str]:\n\"\"\"Project homepage url.\"\"\"\n        return self._get_property(\"url\")\n\n    @homepage.setter\n    def homepage(self, homepage: Optional[str]) -&gt; None:\n\"\"\"Set project homepage url.\"\"\"\n        self._set_property(\"url\", homepage)\n\n    @property\n    def repository(self) -&gt; Optional[str]:\n\"\"\"Project repository url.\"\"\"\n        return self._get_property(\"repository-code\")\n\n    @repository.setter\n    def repository(self, repository: Optional[str]) -&gt; None:\n\"\"\"Set project repository url.\"\"\"\n        self._set_property(\"repository-code\", repository)\n\n    def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the CFF object to a file.\"\"\"\n        if path:\n            self._yaml.dump(self._data, path)\n        else:\n            self._yaml.dump(self._data, self.path)\n</code></pre>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.name","title":"name  <code>writable</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Project name.</p>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.description","title":"description  <code>writable</code> <code>property</code>","text":"<pre><code>description: Optional[str]\n</code></pre> <p>Project description.</p>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.authors","title":"authors  <code>writable</code> <code>property</code>","text":"<pre><code>authors: List[str]\n</code></pre> <p>Project authors.</p>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.maintainers","title":"maintainers  <code>writable</code> <code>property</code>","text":"<pre><code>maintainers: Optional[List[str]]\n</code></pre> <p>Project maintainers.</p>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.homepage","title":"homepage  <code>writable</code> <code>property</code>","text":"<pre><code>homepage: Optional[str]\n</code></pre> <p>Project homepage url.</p>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.repository","title":"repository  <code>writable</code> <code>property</code>","text":"<pre><code>repository: Optional[str]\n</code></pre> <p>Project repository url.</p>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.__init__","title":"__init__","text":"<pre><code>__init__(path: Path, create_if_not_exists: bool = True)\n</code></pre> <p>Citation File Format (CFF) parser.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>File path to the CFF file.</p> required <code>create_if_not_exists</code> <code>bool</code> <p>Create an empty CFF file if not exists. Defaults to True.</p> <code>True</code> Source code in <code>src/somesy/cff/core.py</code> <pre><code>def __init__(\n    self,\n    path: Path,\n    create_if_not_exists: bool = True,\n):\n\"\"\"Citation File Format (CFF) parser.\n\n    Args:\n        path (Path): File path to the CFF file.\n        create_if_not_exists (bool, optional): Create an empty CFF file if not exists. Defaults to True.\n    \"\"\"\n    self.path = path\n    self.create_if_not_exists = create_if_not_exists\n    self._yaml = YAML()\n    self._yaml.preserve_quotes = True\n\n    # load and validate the CFF file\n    self._load()\n    self._validate()\n</code></pre>"},{"location":"reference/somesy/cff/core/#somesy.cff.core.CFF.save","title":"save","text":"<pre><code>save(path: Optional[Path] = None) -&gt; None\n</code></pre> <p>Save the CFF object to a file.</p> Source code in <code>src/somesy/cff/core.py</code> <pre><code>def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the CFF object to a file.\"\"\"\n    if path:\n        self._yaml.dump(self._data, path)\n    else:\n        self._yaml.dump(self._data, self.path)\n</code></pre>"},{"location":"reference/somesy/cff/utils/","title":"utils","text":"<p>Utility functions for cff module.</p>"},{"location":"reference/somesy/cff/utils/#somesy.cff.utils.person_to_cff_dict","title":"person_to_cff_dict","text":"<pre><code>person_to_cff_dict(person: Person) -&gt; dict\n</code></pre> <p>Convert project metadata person object to cff dict for person format.</p> Source code in <code>src/somesy/cff/utils.py</code> <pre><code>def person_to_cff_dict(person: Person) -&gt; dict:\n\"\"\"Convert project metadata person object to cff dict for person format.\"\"\"\n    cff_dict = loads(\n        person.json(\n            by_alias=True,\n            exclude_none=True,\n            exclude={\n                \"contribution\",\n                \"contribution_type\",\n                \"contribution_begin\",\n                \"contribution_end\",\n            },\n            exclude_unset=True,\n        )\n    )\n    return cff_dict\n</code></pre>"},{"location":"reference/somesy/cff/validate/","title":"validate","text":"<p>Validate a citation.cff file.</p>"},{"location":"reference/somesy/cff/validate/#somesy.cff.validate.validate_citation","title":"validate_citation","text":"<pre><code>validate_citation(cff_path: Path) -&gt; None\n</code></pre> <p>Validate a citation.cff file.</p> Source code in <code>src/somesy/cff/validate.py</code> <pre><code>def validate_citation(cff_path: Path) -&gt; None:\n\"\"\"Validate a citation.cff file.\"\"\"\n    try:\n        # load the citation metadata from the specified source and create a Python object representation of it\n        citation = create_citation(cff_path, None)\n        citation.validate()\n    except ValueError as e:\n        raise ValueError(f\"CITATION.cff file is not valid!\\n{e}\") from e\n</code></pre>"},{"location":"reference/somesy/commands/","title":"commands","text":"<p>Commands for somesy.</p>"},{"location":"reference/somesy/commands/sync/","title":"sync","text":"<p>Sync selected metadata files with given input file.</p>"},{"location":"reference/somesy/commands/sync/#somesy.commands.sync.sync","title":"sync","text":"<pre><code>sync(\n    input_file: Path,\n    pyproject_file: Optional[Path] = None,\n    cff_file: Optional[Path] = None,\n    create_cff: bool = True,\n)\n</code></pre> <p>Sync selected metadata files with given input file.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>Path</code> <p>input file path to read project metadata from.</p> required <code>pyproject_file</code> <code>Path</code> <p>pyproject file to read project metadata from.</p> <code>None</code> <code>cff_file</code> <code>Path</code> <p>CFF file path if wanted to be synced. Defaults to None.</p> <code>None</code> <code>create_cff</code> <code>bool</code> <p>Create CFF file if does not exist. Defaults to True.</p> <code>True</code> Source code in <code>src/somesy/commands/sync.py</code> <pre><code>def sync(\n    input_file: Path,\n    pyproject_file: Optional[Path] = None,\n    cff_file: Optional[Path] = None,\n    create_cff: bool = True,\n):\n\"\"\"Sync selected metadata files with given input file.\n\n    Args:\n        input_file (Path): input file path to read project metadata from.\n        pyproject_file (Path, optional): pyproject file to read project metadata from.\n        cff_file (Path, optional): CFF file path if wanted to be synced. Defaults to None.\n        create_cff (bool, optional): Create CFF file if does not exist. Defaults to True.\n    \"\"\"\n    metadata = get_project_metadata(input_file)\n    logger.debug(f\"Project metadata: {metadata}\")\n\n    if pyproject_file is not None:\n        _sync_python(metadata, pyproject_file)\n\n    if cff_file is not None:\n        _sync_cff(metadata, cff_file, create_cff)\n</code></pre>"},{"location":"reference/somesy/core/","title":"core","text":"<p>Somesy core module.</p>"},{"location":"reference/somesy/core/config/","title":"config","text":"<p>Configuration file for somesy.</p>"},{"location":"reference/somesy/core/config/#somesy.core.config.INPUT_FILES_ORDERED","title":"INPUT_FILES_ORDERED  <code>module-attribute</code>","text":"<pre><code>INPUT_FILES_ORDERED = ['.somesy.toml', 'pyproject.toml']\n</code></pre> <p>Input files ordered by priority for discovery.</p>"},{"location":"reference/somesy/core/config/#somesy.core.config.VERBOSE","title":"VERBOSE  <code>module-attribute</code>","text":"<pre><code>VERBOSE: int = 15\n</code></pre> <p>Custom logging level between INFO and DEBUG.</p>"},{"location":"reference/somesy/core/core/","title":"core","text":"<p>Core somesy functions.</p>"},{"location":"reference/somesy/core/core/#somesy.core.core.get_project_metadata","title":"get_project_metadata","text":"<pre><code>get_project_metadata(path: Path) -&gt; ProjectMetadata\n</code></pre> <p>Return project metadata to from different sources as a simple dict. Currently, only pyproject.toml inputs are supported.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>input source path</p> required <p>Returns:</p> Name Type Description <code>ProjectMetadata</code> <code>ProjectMetadata</code> <p>project metadata input to sync output files</p> Source code in <code>src/somesy/core/core.py</code> <pre><code>def get_project_metadata(path: Path) -&gt; ProjectMetadata:\n\"\"\"Return project metadata to from different sources as a simple dict. Currently, only pyproject.toml inputs are supported.\n\n    Args:\n        path (Path): input source path\n\n    Returns:\n        ProjectMetadata: project metadata input to sync output files\n    \"\"\"\n    # load the pyproject.toml file\n    if path.suffix == \".toml\":\n        with open(path, \"r\") as f:\n            input = load(f)\n\n        # load project metadata\n        if \"somesy\" in path.name and \"project\" in input:\n            metadata = input[\"project\"]\n            try:\n                metadata = metadata.unwrap()\n                return ProjectMetadata(**metadata)\n            except Exception as e:\n                raise ValueError(f\"Somesy input validation failed: {e}\")\n\n        elif (\n            \"pyproject\" in path.name\n            and \"tool\" in input\n            and \"somesy\" in input[\"tool\"]\n            and \"project\" in input[\"tool\"][\"somesy\"]\n        ):\n            metadata = input[\"tool\"][\"somesy\"][\"project\"]\n            try:\n                metadata = metadata.unwrap()\n                return ProjectMetadata(**metadata)\n            except Exception as e:\n                raise ValueError(f\"Somesy input validation failed: {e}\")\n        else:\n            raise ValueError(\"Somesy input not found.\")\n    else:\n        raise ValueError(\"Only toml files are supported for reading somesy input.\")\n</code></pre>"},{"location":"reference/somesy/core/discover/","title":"discover","text":"<p>Discover somesy related files and paths.</p>"},{"location":"reference/somesy/core/discover/#somesy.core.discover.discover_input","title":"discover_input","text":"<pre><code>discover_input(input_file: Optional[Path] = None) -&gt; Path\n</code></pre> <p>Check given input file path. If not given, find somesy configuration file path from default list.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>Optional[str]</code> <p>somesy configuration file path. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>Raised if no somesy input file found from cli input or the defaults.</p> <p>Returns:</p> Type Description <code>Path</code> <p>Optional[Path]:  somesy configuration file path.</p> Source code in <code>src/somesy/core/discover.py</code> <pre><code>def discover_input(input_file: Optional[Path] = None) -&gt; Path:\n\"\"\"Check given input file path. If not given, find somesy configuration file path from default list.\n\n    Args:\n        input_file (Optional[str], optional): somesy configuration file path. Defaults to None.\n\n    Raises:\n        FileNotFoundError: Raised if no somesy input file found from cli input or the defaults.\n\n    Returns:\n        Optional[Path]:  somesy configuration file path.\n    \"\"\"\n    if input_file:\n        if input_file.is_file():\n            logger.info(f\"Using given {input_file} as somesy input file.\")\n            return input_file\n        else:\n            logger.verbose(\n                f\"Given input file {input_file} does not exist. Trying to find somesy input file from defaults.\"\n            )\n    for filename in INPUT_FILES_ORDERED:\n        input_file = Path(filename)\n        if input_file.is_file():\n            logger.verbose(\n                f\"Using {input_file} from default somesy config list as somesy input file.\"\n            )\n            return input_file\n    raise FileNotFoundError(\"No somesy input file found.\")\n</code></pre>"},{"location":"reference/somesy/core/models/","title":"models","text":"<p>Core models for the somesy package.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.LicenseEnum","title":"LicenseEnum","text":"<p>         Bases: <code>Enum</code></p> <p>SPDX license identifiers.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>class LicenseEnum(Enum):\n\"\"\"SPDX license identifiers.\"\"\"\n\n    field_0BSD = \"0BSD\"\n    AAL = \"AAL\"\n    Abstyles = \"Abstyles\"\n    Adobe_2006 = \"Adobe-2006\"\n    Adobe_Glyph = \"Adobe-Glyph\"\n    ADSL = \"ADSL\"\n    AFL_1_1 = \"AFL-1.1\"\n    AFL_1_2 = \"AFL-1.2\"\n    AFL_2_0 = \"AFL-2.0\"\n    AFL_2_1 = \"AFL-2.1\"\n    AFL_3_0 = \"AFL-3.0\"\n    Afmparse = \"Afmparse\"\n    AGPL_1_0 = \"AGPL-1.0\"\n    AGPL_1_0_only = \"AGPL-1.0-only\"\n    AGPL_1_0_or_later = \"AGPL-1.0-or-later\"\n    AGPL_3_0 = \"AGPL-3.0\"\n    AGPL_3_0_only = \"AGPL-3.0-only\"\n    AGPL_3_0_or_later = \"AGPL-3.0-or-later\"\n    Aladdin = \"Aladdin\"\n    AMDPLPA = \"AMDPLPA\"\n    AML = \"AML\"\n    AMPAS = \"AMPAS\"\n    ANTLR_PD = \"ANTLR-PD\"\n    ANTLR_PD_fallback = \"ANTLR-PD-fallback\"\n    Apache_1_0 = \"Apache-1.0\"\n    Apache_1_1 = \"Apache-1.1\"\n    Apache_2_0 = \"Apache-2.0\"\n    APAFML = \"APAFML\"\n    APL_1_0 = \"APL-1.0\"\n    APSL_1_0 = \"APSL-1.0\"\n    APSL_1_1 = \"APSL-1.1\"\n    APSL_1_2 = \"APSL-1.2\"\n    APSL_2_0 = \"APSL-2.0\"\n    Artistic_1_0 = \"Artistic-1.0\"\n    Artistic_1_0_cl8 = \"Artistic-1.0-cl8\"\n    Artistic_1_0_Perl = \"Artistic-1.0-Perl\"\n    Artistic_2_0 = \"Artistic-2.0\"\n    Bahyph = \"Bahyph\"\n    Barr = \"Barr\"\n    Beerware = \"Beerware\"\n    BitTorrent_1_0 = \"BitTorrent-1.0\"\n    BitTorrent_1_1 = \"BitTorrent-1.1\"\n    blessing = \"blessing\"\n    BlueOak_1_0_0 = \"BlueOak-1.0.0\"\n    Borceux = \"Borceux\"\n    BSD_1_Clause = \"BSD-1-Clause\"\n    BSD_2_Clause = \"BSD-2-Clause\"\n    BSD_2_Clause_FreeBSD = \"BSD-2-Clause-FreeBSD\"\n    BSD_2_Clause_NetBSD = \"BSD-2-Clause-NetBSD\"\n    BSD_2_Clause_Patent = \"BSD-2-Clause-Patent\"\n    BSD_2_Clause_Views = \"BSD-2-Clause-Views\"\n    BSD_3_Clause = \"BSD-3-Clause\"\n    BSD_3_Clause_Attribution = \"BSD-3-Clause-Attribution\"\n    BSD_3_Clause_Clear = \"BSD-3-Clause-Clear\"\n    BSD_3_Clause_LBNL = \"BSD-3-Clause-LBNL\"\n    BSD_3_Clause_Modification = \"BSD-3-Clause-Modification\"\n    BSD_3_Clause_No_Nuclear_License = \"BSD-3-Clause-No-Nuclear-License\"\n    BSD_3_Clause_No_Nuclear_License_2014 = \"BSD-3-Clause-No-Nuclear-License-2014\"\n    BSD_3_Clause_No_Nuclear_Warranty = \"BSD-3-Clause-No-Nuclear-Warranty\"\n    BSD_3_Clause_Open_MPI = \"BSD-3-Clause-Open-MPI\"\n    BSD_4_Clause = \"BSD-4-Clause\"\n    BSD_4_Clause_Shortened = \"BSD-4-Clause-Shortened\"\n    BSD_4_Clause_UC = \"BSD-4-Clause-UC\"\n    BSD_Protection = \"BSD-Protection\"\n    BSD_Source_Code = \"BSD-Source-Code\"\n    BSL_1_0 = \"BSL-1.0\"\n    BUSL_1_1 = \"BUSL-1.1\"\n    bzip2_1_0_5 = \"bzip2-1.0.5\"\n    bzip2_1_0_6 = \"bzip2-1.0.6\"\n    C_UDA_1_0 = \"C-UDA-1.0\"\n    CAL_1_0 = \"CAL-1.0\"\n    CAL_1_0_Combined_Work_Exception = \"CAL-1.0-Combined-Work-Exception\"\n    Caldera = \"Caldera\"\n    CATOSL_1_1 = \"CATOSL-1.1\"\n    CC_BY_1_0 = \"CC-BY-1.0\"\n    CC_BY_2_0 = \"CC-BY-2.0\"\n    CC_BY_2_5 = \"CC-BY-2.5\"\n    CC_BY_3_0 = \"CC-BY-3.0\"\n    CC_BY_3_0_AT = \"CC-BY-3.0-AT\"\n    CC_BY_3_0_US = \"CC-BY-3.0-US\"\n    CC_BY_4_0 = \"CC-BY-4.0\"\n    CC_BY_NC_1_0 = \"CC-BY-NC-1.0\"\n    CC_BY_NC_2_0 = \"CC-BY-NC-2.0\"\n    CC_BY_NC_2_5 = \"CC-BY-NC-2.5\"\n    CC_BY_NC_3_0 = \"CC-BY-NC-3.0\"\n    CC_BY_NC_4_0 = \"CC-BY-NC-4.0\"\n    CC_BY_NC_ND_1_0 = \"CC-BY-NC-ND-1.0\"\n    CC_BY_NC_ND_2_0 = \"CC-BY-NC-ND-2.0\"\n    CC_BY_NC_ND_2_5 = \"CC-BY-NC-ND-2.5\"\n    CC_BY_NC_ND_3_0 = \"CC-BY-NC-ND-3.0\"\n    CC_BY_NC_ND_3_0_IGO = \"CC-BY-NC-ND-3.0-IGO\"\n    CC_BY_NC_ND_4_0 = \"CC-BY-NC-ND-4.0\"\n    CC_BY_NC_SA_1_0 = \"CC-BY-NC-SA-1.0\"\n    CC_BY_NC_SA_2_0 = \"CC-BY-NC-SA-2.0\"\n    CC_BY_NC_SA_2_5 = \"CC-BY-NC-SA-2.5\"\n    CC_BY_NC_SA_3_0 = \"CC-BY-NC-SA-3.0\"\n    CC_BY_NC_SA_4_0 = \"CC-BY-NC-SA-4.0\"\n    CC_BY_ND_1_0 = \"CC-BY-ND-1.0\"\n    CC_BY_ND_2_0 = \"CC-BY-ND-2.0\"\n    CC_BY_ND_2_5 = \"CC-BY-ND-2.5\"\n    CC_BY_ND_3_0 = \"CC-BY-ND-3.0\"\n    CC_BY_ND_4_0 = \"CC-BY-ND-4.0\"\n    CC_BY_SA_1_0 = \"CC-BY-SA-1.0\"\n    CC_BY_SA_2_0 = \"CC-BY-SA-2.0\"\n    CC_BY_SA_2_0_UK = \"CC-BY-SA-2.0-UK\"\n    CC_BY_SA_2_1_JP = \"CC-BY-SA-2.1-JP\"\n    CC_BY_SA_2_5 = \"CC-BY-SA-2.5\"\n    CC_BY_SA_3_0 = \"CC-BY-SA-3.0\"\n    CC_BY_SA_3_0_AT = \"CC-BY-SA-3.0-AT\"\n    CC_BY_SA_4_0 = \"CC-BY-SA-4.0\"\n    CC_PDDC = \"CC-PDDC\"\n    CC0_1_0 = \"CC0-1.0\"\n    CDDL_1_0 = \"CDDL-1.0\"\n    CDDL_1_1 = \"CDDL-1.1\"\n    CDL_1_0 = \"CDL-1.0\"\n    CDLA_Permissive_1_0 = \"CDLA-Permissive-1.0\"\n    CDLA_Sharing_1_0 = \"CDLA-Sharing-1.0\"\n    CECILL_1_0 = \"CECILL-1.0\"\n    CECILL_1_1 = \"CECILL-1.1\"\n    CECILL_2_0 = \"CECILL-2.0\"\n    CECILL_2_1 = \"CECILL-2.1\"\n    CECILL_B = \"CECILL-B\"\n    CECILL_C = \"CECILL-C\"\n    CERN_OHL_1_1 = \"CERN-OHL-1.1\"\n    CERN_OHL_1_2 = \"CERN-OHL-1.2\"\n    CERN_OHL_P_2_0 = \"CERN-OHL-P-2.0\"\n    CERN_OHL_S_2_0 = \"CERN-OHL-S-2.0\"\n    CERN_OHL_W_2_0 = \"CERN-OHL-W-2.0\"\n    ClArtistic = \"ClArtistic\"\n    CNRI_Jython = \"CNRI-Jython\"\n    CNRI_Python = \"CNRI-Python\"\n    CNRI_Python_GPL_Compatible = \"CNRI-Python-GPL-Compatible\"\n    Condor_1_1 = \"Condor-1.1\"\n    copyleft_next_0_3_0 = \"copyleft-next-0.3.0\"\n    copyleft_next_0_3_1 = \"copyleft-next-0.3.1\"\n    CPAL_1_0 = \"CPAL-1.0\"\n    CPL_1_0 = \"CPL-1.0\"\n    CPOL_1_02 = \"CPOL-1.02\"\n    Crossword = \"Crossword\"\n    CrystalStacker = \"CrystalStacker\"\n    CUA_OPL_1_0 = \"CUA-OPL-1.0\"\n    Cube = \"Cube\"\n    curl = \"curl\"\n    D_FSL_1_0 = \"D-FSL-1.0\"\n    diffmark = \"diffmark\"\n    DOC = \"DOC\"\n    Dotseqn = \"Dotseqn\"\n    DRL_1_0 = \"DRL-1.0\"\n    DSDP = \"DSDP\"\n    dvipdfm = \"dvipdfm\"\n    ECL_1_0 = \"ECL-1.0\"\n    ECL_2_0 = \"ECL-2.0\"\n    eCos_2_0 = \"eCos-2.0\"\n    EFL_1_0 = \"EFL-1.0\"\n    EFL_2_0 = \"EFL-2.0\"\n    eGenix = \"eGenix\"\n    Entessa = \"Entessa\"\n    EPICS = \"EPICS\"\n    EPL_1_0 = \"EPL-1.0\"\n    EPL_2_0 = \"EPL-2.0\"\n    ErlPL_1_1 = \"ErlPL-1.1\"\n    etalab_2_0 = \"etalab-2.0\"\n    EUDatagrid = \"EUDatagrid\"\n    EUPL_1_0 = \"EUPL-1.0\"\n    EUPL_1_1 = \"EUPL-1.1\"\n    EUPL_1_2 = \"EUPL-1.2\"\n    Eurosym = \"Eurosym\"\n    Fair = \"Fair\"\n    Frameworx_1_0 = \"Frameworx-1.0\"\n    FreeBSD_DOC = \"FreeBSD-DOC\"\n    FreeImage = \"FreeImage\"\n    FSFAP = \"FSFAP\"\n    FSFUL = \"FSFUL\"\n    FSFULLR = \"FSFULLR\"\n    FTL = \"FTL\"\n    GD = \"GD\"\n    GFDL_1_1 = \"GFDL-1.1\"\n    GFDL_1_1_invariants_only = \"GFDL-1.1-invariants-only\"\n    GFDL_1_1_invariants_or_later = \"GFDL-1.1-invariants-or-later\"\n    GFDL_1_1_no_invariants_only = \"GFDL-1.1-no-invariants-only\"\n    GFDL_1_1_no_invariants_or_later = \"GFDL-1.1-no-invariants-or-later\"\n    GFDL_1_1_only = \"GFDL-1.1-only\"\n    GFDL_1_1_or_later = \"GFDL-1.1-or-later\"\n    GFDL_1_2 = \"GFDL-1.2\"\n    GFDL_1_2_invariants_only = \"GFDL-1.2-invariants-only\"\n    GFDL_1_2_invariants_or_later = \"GFDL-1.2-invariants-or-later\"\n    GFDL_1_2_no_invariants_only = \"GFDL-1.2-no-invariants-only\"\n    GFDL_1_2_no_invariants_or_later = \"GFDL-1.2-no-invariants-or-later\"\n    GFDL_1_2_only = \"GFDL-1.2-only\"\n    GFDL_1_2_or_later = \"GFDL-1.2-or-later\"\n    GFDL_1_3 = \"GFDL-1.3\"\n    GFDL_1_3_invariants_only = \"GFDL-1.3-invariants-only\"\n    GFDL_1_3_invariants_or_later = \"GFDL-1.3-invariants-or-later\"\n    GFDL_1_3_no_invariants_only = \"GFDL-1.3-no-invariants-only\"\n    GFDL_1_3_no_invariants_or_later = \"GFDL-1.3-no-invariants-or-later\"\n    GFDL_1_3_only = \"GFDL-1.3-only\"\n    GFDL_1_3_or_later = \"GFDL-1.3-or-later\"\n    Giftware = \"Giftware\"\n    GL2PS = \"GL2PS\"\n    Glide = \"Glide\"\n    Glulxe = \"Glulxe\"\n    GLWTPL = \"GLWTPL\"\n    gnuplot = \"gnuplot\"\n    GPL_1_0 = \"GPL-1.0\"\n    GPL_1_0_only = \"GPL-1.0-only\"\n    GPL_1_0_or_later = \"GPL-1.0-or-later\"\n    GPL_1_0_ = \"GPL-1.0+\"\n    GPL_2_0 = \"GPL-2.0\"\n    GPL_2_0_only = \"GPL-2.0-only\"\n    GPL_2_0_or_later = \"GPL-2.0-or-later\"\n    GPL_2_0_with_autoconf_exception = \"GPL-2.0-with-autoconf-exception\"\n    GPL_2_0_with_bison_exception = \"GPL-2.0-with-bison-exception\"\n    GPL_2_0_with_classpath_exception = \"GPL-2.0-with-classpath-exception\"\n    GPL_2_0_with_font_exception = \"GPL-2.0-with-font-exception\"\n    GPL_2_0_with_GCC_exception = \"GPL-2.0-with-GCC-exception\"\n    GPL_2_0_ = \"GPL-2.0+\"\n    GPL_3_0 = \"GPL-3.0\"\n    GPL_3_0_only = \"GPL-3.0-only\"\n    GPL_3_0_or_later = \"GPL-3.0-or-later\"\n    GPL_3_0_with_autoconf_exception = \"GPL-3.0-with-autoconf-exception\"\n    GPL_3_0_with_GCC_exception = \"GPL-3.0-with-GCC-exception\"\n    GPL_3_0_ = \"GPL-3.0+\"\n    gSOAP_1_3b = \"gSOAP-1.3b\"\n    HaskellReport = \"HaskellReport\"\n    Hippocratic_2_1 = \"Hippocratic-2.1\"\n    HPND = \"HPND\"\n    HPND_sell_variant = \"HPND-sell-variant\"\n    HTMLTIDY = \"HTMLTIDY\"\n    IBM_pibs = \"IBM-pibs\"\n    ICU = \"ICU\"\n    IJG = \"IJG\"\n    ImageMagick = \"ImageMagick\"\n    iMatix = \"iMatix\"\n    Imlib2 = \"Imlib2\"\n    Info_ZIP = \"Info-ZIP\"\n    Intel = \"Intel\"\n    Intel_ACPI = \"Intel-ACPI\"\n    Interbase_1_0 = \"Interbase-1.0\"\n    IPA = \"IPA\"\n    IPL_1_0 = \"IPL-1.0\"\n    ISC = \"ISC\"\n    JasPer_2_0 = \"JasPer-2.0\"\n    JPNIC = \"JPNIC\"\n    JSON = \"JSON\"\n    LAL_1_2 = \"LAL-1.2\"\n    LAL_1_3 = \"LAL-1.3\"\n    Latex2e = \"Latex2e\"\n    Leptonica = \"Leptonica\"\n    LGPL_2_0 = \"LGPL-2.0\"\n    LGPL_2_0_only = \"LGPL-2.0-only\"\n    LGPL_2_0_or_later = \"LGPL-2.0-or-later\"\n    LGPL_2_0_ = \"LGPL-2.0+\"\n    LGPL_2_1 = \"LGPL-2.1\"\n    LGPL_2_1_only = \"LGPL-2.1-only\"\n    LGPL_2_1_or_later = \"LGPL-2.1-or-later\"\n    LGPL_2_1_ = \"LGPL-2.1+\"\n    LGPL_3_0 = \"LGPL-3.0\"\n    LGPL_3_0_only = \"LGPL-3.0-only\"\n    LGPL_3_0_or_later = \"LGPL-3.0-or-later\"\n    LGPL_3_0_ = \"LGPL-3.0+\"\n    LGPLLR = \"LGPLLR\"\n    Libpng = \"Libpng\"\n    libpng_2_0 = \"libpng-2.0\"\n    libselinux_1_0 = \"libselinux-1.0\"\n    libtiff = \"libtiff\"\n    LiLiQ_P_1_1 = \"LiLiQ-P-1.1\"\n    LiLiQ_R_1_1 = \"LiLiQ-R-1.1\"\n    LiLiQ_Rplus_1_1 = \"LiLiQ-Rplus-1.1\"\n    Linux_OpenIB = \"Linux-OpenIB\"\n    LPL_1_0 = \"LPL-1.0\"\n    LPL_1_02 = \"LPL-1.02\"\n    LPPL_1_0 = \"LPPL-1.0\"\n    LPPL_1_1 = \"LPPL-1.1\"\n    LPPL_1_2 = \"LPPL-1.2\"\n    LPPL_1_3a = \"LPPL-1.3a\"\n    LPPL_1_3c = \"LPPL-1.3c\"\n    MakeIndex = \"MakeIndex\"\n    MirOS = \"MirOS\"\n    MIT = \"MIT\"\n    MIT_0 = \"MIT-0\"\n    MIT_advertising = \"MIT-advertising\"\n    MIT_CMU = \"MIT-CMU\"\n    MIT_enna = \"MIT-enna\"\n    MIT_feh = \"MIT-feh\"\n    MIT_Modern_Variant = \"MIT-Modern-Variant\"\n    MIT_open_group = \"MIT-open-group\"\n    MITNFA = \"MITNFA\"\n    Motosoto = \"Motosoto\"\n    mpich2 = \"mpich2\"\n    MPL_1_0 = \"MPL-1.0\"\n    MPL_1_1 = \"MPL-1.1\"\n    MPL_2_0 = \"MPL-2.0\"\n    MPL_2_0_no_copyleft_exception = \"MPL-2.0-no-copyleft-exception\"\n    MS_PL = \"MS-PL\"\n    MS_RL = \"MS-RL\"\n    MTLL = \"MTLL\"\n    MulanPSL_1_0 = \"MulanPSL-1.0\"\n    MulanPSL_2_0 = \"MulanPSL-2.0\"\n    Multics = \"Multics\"\n    Mup = \"Mup\"\n    NAIST_2003 = \"NAIST-2003\"\n    NASA_1_3 = \"NASA-1.3\"\n    Naumen = \"Naumen\"\n    NBPL_1_0 = \"NBPL-1.0\"\n    NCGL_UK_2_0 = \"NCGL-UK-2.0\"\n    NCSA = \"NCSA\"\n    Net_SNMP = \"Net-SNMP\"\n    NetCDF = \"NetCDF\"\n    Newsletr = \"Newsletr\"\n    NGPL = \"NGPL\"\n    NIST_PD = \"NIST-PD\"\n    NIST_PD_fallback = \"NIST-PD-fallback\"\n    NLOD_1_0 = \"NLOD-1.0\"\n    NLPL = \"NLPL\"\n    Nokia = \"Nokia\"\n    NOSL = \"NOSL\"\n    Noweb = \"Noweb\"\n    NPL_1_0 = \"NPL-1.0\"\n    NPL_1_1 = \"NPL-1.1\"\n    NPOSL_3_0 = \"NPOSL-3.0\"\n    NRL = \"NRL\"\n    NTP = \"NTP\"\n    NTP_0 = \"NTP-0\"\n    Nunit = \"Nunit\"\n    O_UDA_1_0 = \"O-UDA-1.0\"\n    OCCT_PL = \"OCCT-PL\"\n    OCLC_2_0 = \"OCLC-2.0\"\n    ODbL_1_0 = \"ODbL-1.0\"\n    ODC_By_1_0 = \"ODC-By-1.0\"\n    OFL_1_0 = \"OFL-1.0\"\n    OFL_1_0_no_RFN = \"OFL-1.0-no-RFN\"\n    OFL_1_0_RFN = \"OFL-1.0-RFN\"\n    OFL_1_1 = \"OFL-1.1\"\n    OFL_1_1_no_RFN = \"OFL-1.1-no-RFN\"\n    OFL_1_1_RFN = \"OFL-1.1-RFN\"\n    OGC_1_0 = \"OGC-1.0\"\n    OGDL_Taiwan_1_0 = \"OGDL-Taiwan-1.0\"\n    OGL_Canada_2_0 = \"OGL-Canada-2.0\"\n    OGL_UK_1_0 = \"OGL-UK-1.0\"\n    OGL_UK_2_0 = \"OGL-UK-2.0\"\n    OGL_UK_3_0 = \"OGL-UK-3.0\"\n    OGTSL = \"OGTSL\"\n    OLDAP_1_1 = \"OLDAP-1.1\"\n    OLDAP_1_2 = \"OLDAP-1.2\"\n    OLDAP_1_3 = \"OLDAP-1.3\"\n    OLDAP_1_4 = \"OLDAP-1.4\"\n    OLDAP_2_0 = \"OLDAP-2.0\"\n    OLDAP_2_0_1 = \"OLDAP-2.0.1\"\n    OLDAP_2_1 = \"OLDAP-2.1\"\n    OLDAP_2_2 = \"OLDAP-2.2\"\n    OLDAP_2_2_1 = \"OLDAP-2.2.1\"\n    OLDAP_2_2_2 = \"OLDAP-2.2.2\"\n    OLDAP_2_3 = \"OLDAP-2.3\"\n    OLDAP_2_4 = \"OLDAP-2.4\"\n    OLDAP_2_5 = \"OLDAP-2.5\"\n    OLDAP_2_6 = \"OLDAP-2.6\"\n    OLDAP_2_7 = \"OLDAP-2.7\"\n    OLDAP_2_8 = \"OLDAP-2.8\"\n    OML = \"OML\"\n    OpenSSL = \"OpenSSL\"\n    OPL_1_0 = \"OPL-1.0\"\n    OSET_PL_2_1 = \"OSET-PL-2.1\"\n    OSL_1_0 = \"OSL-1.0\"\n    OSL_1_1 = \"OSL-1.1\"\n    OSL_2_0 = \"OSL-2.0\"\n    OSL_2_1 = \"OSL-2.1\"\n    OSL_3_0 = \"OSL-3.0\"\n    Parity_6_0_0 = \"Parity-6.0.0\"\n    Parity_7_0_0 = \"Parity-7.0.0\"\n    PDDL_1_0 = \"PDDL-1.0\"\n    PHP_3_0 = \"PHP-3.0\"\n    PHP_3_01 = \"PHP-3.01\"\n    Plexus = \"Plexus\"\n    PolyForm_Noncommercial_1_0_0 = \"PolyForm-Noncommercial-1.0.0\"\n    PolyForm_Small_Business_1_0_0 = \"PolyForm-Small-Business-1.0.0\"\n    PostgreSQL = \"PostgreSQL\"\n    PSF_2_0 = \"PSF-2.0\"\n    psfrag = \"psfrag\"\n    psutils = \"psutils\"\n    Python_2_0 = \"Python-2.0\"\n    Qhull = \"Qhull\"\n    QPL_1_0 = \"QPL-1.0\"\n    Rdisc = \"Rdisc\"\n    RHeCos_1_1 = \"RHeCos-1.1\"\n    RPL_1_1 = \"RPL-1.1\"\n    RPL_1_5 = \"RPL-1.5\"\n    RPSL_1_0 = \"RPSL-1.0\"\n    RSA_MD = \"RSA-MD\"\n    RSCPL = \"RSCPL\"\n    Ruby = \"Ruby\"\n    SAX_PD = \"SAX-PD\"\n    Saxpath = \"Saxpath\"\n    SCEA = \"SCEA\"\n    Sendmail = \"Sendmail\"\n    Sendmail_8_23 = \"Sendmail-8.23\"\n    SGI_B_1_0 = \"SGI-B-1.0\"\n    SGI_B_1_1 = \"SGI-B-1.1\"\n    SGI_B_2_0 = \"SGI-B-2.0\"\n    SHL_0_5 = \"SHL-0.5\"\n    SHL_0_51 = \"SHL-0.51\"\n    SimPL_2_0 = \"SimPL-2.0\"\n    SISSL = \"SISSL\"\n    SISSL_1_2 = \"SISSL-1.2\"\n    Sleepycat = \"Sleepycat\"\n    SMLNJ = \"SMLNJ\"\n    SMPPL = \"SMPPL\"\n    SNIA = \"SNIA\"\n    Spencer_86 = \"Spencer-86\"\n    Spencer_94 = \"Spencer-94\"\n    Spencer_99 = \"Spencer-99\"\n    SPL_1_0 = \"SPL-1.0\"\n    SSH_OpenSSH = \"SSH-OpenSSH\"\n    SSH_short = \"SSH-short\"\n    SSPL_1_0 = \"SSPL-1.0\"\n    StandardML_NJ = \"StandardML-NJ\"\n    SugarCRM_1_1_3 = \"SugarCRM-1.1.3\"\n    SWL = \"SWL\"\n    TAPR_OHL_1_0 = \"TAPR-OHL-1.0\"\n    TCL = \"TCL\"\n    TCP_wrappers = \"TCP-wrappers\"\n    TMate = \"TMate\"\n    TORQUE_1_1 = \"TORQUE-1.1\"\n    TOSL = \"TOSL\"\n    TU_Berlin_1_0 = \"TU-Berlin-1.0\"\n    TU_Berlin_2_0 = \"TU-Berlin-2.0\"\n    UCL_1_0 = \"UCL-1.0\"\n    Unicode_DFS_2015 = \"Unicode-DFS-2015\"\n    Unicode_DFS_2016 = \"Unicode-DFS-2016\"\n    Unicode_TOU = \"Unicode-TOU\"\n    Unlicense = \"Unlicense\"\n    UPL_1_0 = \"UPL-1.0\"\n    Vim = \"Vim\"\n    VOSTROM = \"VOSTROM\"\n    VSL_1_0 = \"VSL-1.0\"\n    W3C = \"W3C\"\n    W3C_19980720 = \"W3C-19980720\"\n    W3C_20150513 = \"W3C-20150513\"\n    Watcom_1_0 = \"Watcom-1.0\"\n    Wsuipa = \"Wsuipa\"\n    WTFPL = \"WTFPL\"\n    wxWindows = \"wxWindows\"\n    X11 = \"X11\"\n    Xerox = \"Xerox\"\n    XFree86_1_1 = \"XFree86-1.1\"\n    xinetd = \"xinetd\"\n    Xnet = \"Xnet\"\n    xpp = \"xpp\"\n    XSkat = \"XSkat\"\n    YPL_1_0 = \"YPL-1.0\"\n    YPL_1_1 = \"YPL-1.1\"\n    Zed = \"Zed\"\n    Zend_2_0 = \"Zend-2.0\"\n    Zimbra_1_3 = \"Zimbra-1.3\"\n    Zimbra_1_4 = \"Zimbra-1.4\"\n    Zlib = \"Zlib\"\n    zlib_acknowledgement = \"zlib-acknowledgement\"\n    ZPL_1_1 = \"ZPL-1.1\"\n    ZPL_2_0 = \"ZPL-2.0\"\n    ZPL_2_1 = \"ZPL-2.1\"\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.ContributionTypeEnum","title":"ContributionTypeEnum","text":"<p>         Bases: <code>Enum</code></p> <p>Contribution type using emojis from https://allcontributors.org/docs/en/emoji-key .</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>class ContributionTypeEnum(Enum):\n\"\"\"Contribution type using emojis from https://allcontributors.org/docs/en/emoji-key .\"\"\"\n\n    audio = \"audio\"\n    ally = \"ally\"\n    bug = \"bug\"\n    blog = \"blog\"\n    business = \"business\"\n    code = \"code\"\n    content = \"content\"\n    data = \"data\"\n    doc = \"doc\"\n    design = \"design\"\n    example = \"example\"\n    eventOrganizing = \"eventOrganizing\"\n    financial = \"financial\"\n    fundingFinding = \"fundingFinding\"\n    ideas = \"ideas\"\n    infra = \"infra\"\n    maintenance = \"maintenance\"\n    mentoring = \"mentoring\"\n    platform = \"platform\"\n    plugin = \"plugin\"\n    projectManagement = \"projectManagement\"\n    promotion = \"promotion\"\n    question = \"question\"\n    research = \"research\"\n    review = \"review\"\n    security = \"security\"\n    tool = \"tool\"\n    translation = \"translation\"\n    test = \"test\"\n    tutorial = \"tutorial\"\n    talk = \"talk\"\n    userTesting = \"userTesting\"\n    video = \"video\"\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.Country","title":"Country","text":"<p>         Bases: <code>Enum</code></p> <p>Country codes from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 . It is used for the country of a person in project metadata.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>class Country(Enum):\n\"\"\"Country codes from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 . It is used for the country of a person in project metadata.\"\"\"\n\n    AD = \"AD\"\n    AE = \"AE\"\n    AF = \"AF\"\n    AG = \"AG\"\n    AI = \"AI\"\n    AL = \"AL\"\n    AM = \"AM\"\n    AO = \"AO\"\n    AQ = \"AQ\"\n    AR = \"AR\"\n    AS = \"AS\"\n    AT = \"AT\"\n    AU = \"AU\"\n    AW = \"AW\"\n    AX = \"AX\"\n    AZ = \"AZ\"\n    BA = \"BA\"\n    BB = \"BB\"\n    BD = \"BD\"\n    BE = \"BE\"\n    BF = \"BF\"\n    BG = \"BG\"\n    BH = \"BH\"\n    BI = \"BI\"\n    BJ = \"BJ\"\n    BL = \"BL\"\n    BM = \"BM\"\n    BN = \"BN\"\n    BO = \"BO\"\n    BQ = \"BQ\"\n    BR = \"BR\"\n    BS = \"BS\"\n    BT = \"BT\"\n    BV = \"BV\"\n    BW = \"BW\"\n    BY = \"BY\"\n    BZ = \"BZ\"\n    CA = \"CA\"\n    CC = \"CC\"\n    CD = \"CD\"\n    CF = \"CF\"\n    CG = \"CG\"\n    CH = \"CH\"\n    CI = \"CI\"\n    CK = \"CK\"\n    CL = \"CL\"\n    CM = \"CM\"\n    CN = \"CN\"\n    CO = \"CO\"\n    CR = \"CR\"\n    CU = \"CU\"\n    CV = \"CV\"\n    CW = \"CW\"\n    CX = \"CX\"\n    CY = \"CY\"\n    CZ = \"CZ\"\n    DE = \"DE\"\n    DJ = \"DJ\"\n    DK = \"DK\"\n    DM = \"DM\"\n    DO = \"DO\"\n    DZ = \"DZ\"\n    EC = \"EC\"\n    EE = \"EE\"\n    EG = \"EG\"\n    EH = \"EH\"\n    ER = \"ER\"\n    ES = \"ES\"\n    ET = \"ET\"\n    FI = \"FI\"\n    FJ = \"FJ\"\n    FK = \"FK\"\n    FM = \"FM\"\n    FO = \"FO\"\n    FR = \"FR\"\n    GA = \"GA\"\n    GB = \"GB\"\n    GD = \"GD\"\n    GE = \"GE\"\n    GF = \"GF\"\n    GG = \"GG\"\n    GH = \"GH\"\n    GI = \"GI\"\n    GL = \"GL\"\n    GM = \"GM\"\n    GN = \"GN\"\n    GP = \"GP\"\n    GQ = \"GQ\"\n    GR = \"GR\"\n    GS = \"GS\"\n    GT = \"GT\"\n    GU = \"GU\"\n    GW = \"GW\"\n    GY = \"GY\"\n    HK = \"HK\"\n    HM = \"HM\"\n    HN = \"HN\"\n    HR = \"HR\"\n    HT = \"HT\"\n    HU = \"HU\"\n    ID = \"ID\"\n    IE = \"IE\"\n    IL = \"IL\"\n    IM = \"IM\"\n    IN = \"IN\"\n    IO = \"IO\"\n    IQ = \"IQ\"\n    IR = \"IR\"\n    IS = \"IS\"\n    IT = \"IT\"\n    JE = \"JE\"\n    JM = \"JM\"\n    JO = \"JO\"\n    JP = \"JP\"\n    KE = \"KE\"\n    KG = \"KG\"\n    KH = \"KH\"\n    KI = \"KI\"\n    KM = \"KM\"\n    KN = \"KN\"\n    KP = \"KP\"\n    KR = \"KR\"\n    KW = \"KW\"\n    KY = \"KY\"\n    KZ = \"KZ\"\n    LA = \"LA\"\n    LB = \"LB\"\n    LC = \"LC\"\n    LI = \"LI\"\n    LK = \"LK\"\n    LR = \"LR\"\n    LS = \"LS\"\n    LT = \"LT\"\n    LU = \"LU\"\n    LV = \"LV\"\n    LY = \"LY\"\n    MA = \"MA\"\n    MC = \"MC\"\n    MD = \"MD\"\n    ME = \"ME\"\n    MF = \"MF\"\n    MG = \"MG\"\n    MH = \"MH\"\n    MK = \"MK\"\n    ML = \"ML\"\n    MM = \"MM\"\n    MN = \"MN\"\n    MO = \"MO\"\n    MP = \"MP\"\n    MQ = \"MQ\"\n    MR = \"MR\"\n    MS = \"MS\"\n    MT = \"MT\"\n    MU = \"MU\"\n    MV = \"MV\"\n    MW = \"MW\"\n    MX = \"MX\"\n    MY = \"MY\"\n    MZ = \"MZ\"\n    NA = \"NA\"\n    NC = \"NC\"\n    NE = \"NE\"\n    NF = \"NF\"\n    NG = \"NG\"\n    NI = \"NI\"\n    NL = \"NL\"\n    NO = \"NO\"\n    NP = \"NP\"\n    NR = \"NR\"\n    NU = \"NU\"\n    NZ = \"NZ\"\n    OM = \"OM\"\n    PA = \"PA\"\n    PE = \"PE\"\n    PF = \"PF\"\n    PG = \"PG\"\n    PH = \"PH\"\n    PK = \"PK\"\n    PL = \"PL\"\n    PM = \"PM\"\n    PN = \"PN\"\n    PR = \"PR\"\n    PS = \"PS\"\n    PT = \"PT\"\n    PW = \"PW\"\n    PY = \"PY\"\n    QA = \"QA\"\n    RE = \"RE\"\n    RO = \"RO\"\n    RS = \"RS\"\n    RU = \"RU\"\n    RW = \"RW\"\n    SA = \"SA\"\n    SB = \"SB\"\n    SC = \"SC\"\n    SD = \"SD\"\n    SE = \"SE\"\n    SG = \"SG\"\n    SH = \"SH\"\n    SI = \"SI\"\n    SJ = \"SJ\"\n    SK = \"SK\"\n    SL = \"SL\"\n    SM = \"SM\"\n    SN = \"SN\"\n    SO = \"SO\"\n    SR = \"SR\"\n    SS = \"SS\"\n    ST = \"ST\"\n    SV = \"SV\"\n    SX = \"SX\"\n    SY = \"SY\"\n    SZ = \"SZ\"\n    TC = \"TC\"\n    TD = \"TD\"\n    TF = \"TF\"\n    TG = \"TG\"\n    TH = \"TH\"\n    TJ = \"TJ\"\n    TK = \"TK\"\n    TL = \"TL\"\n    TM = \"TM\"\n    TN = \"TN\"\n    TO = \"TO\"\n    TR = \"TR\"\n    TT = \"TT\"\n    TV = \"TV\"\n    TW = \"TW\"\n    TZ = \"TZ\"\n    UA = \"UA\"\n    UG = \"UG\"\n    UM = \"UM\"\n    US = \"US\"\n    UY = \"UY\"\n    UZ = \"UZ\"\n    VA = \"VA\"\n    VC = \"VC\"\n    VE = \"VE\"\n    VG = \"VG\"\n    VI = \"VI\"\n    VN = \"VN\"\n    VU = \"VU\"\n    WF = \"WF\"\n    WS = \"WS\"\n    YE = \"YE\"\n    YT = \"YT\"\n    ZA = \"ZA\"\n    ZM = \"ZM\"\n    ZW = \"ZW\"\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.Person","title":"Person","text":"<p>         Bases: <code>BaseModel</code></p> <p>A person that is used in project metadata. Required fields are given-names, family-names, and  email.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>class Person(BaseModel):\n\"\"\"A person that is used in project metadata. Required fields are given-names, family-names, and  email.\"\"\"\n\n    class Config:\n\"\"\"Configuration for the Person model.\"\"\"\n\n        extra = Extra.forbid\n\n    address: Optional[\n        Annotated[str, Field(min_length=1, description=\"The person's address.\")]\n    ]\n    affiliation: Optional[\n        Annotated[str, Field(min_length=1, description=\"The person's affiliation.\")]\n    ]\n    alias: Optional[\n        Annotated[str, Field(min_length=1, description=\"The person's alias.\")]\n    ]\n    city: Optional[\n        Annotated[str, Field(min_length=1, description=\"The person's city.\")]\n    ]\n    country: Optional[Country] = Field(None, description=\"The person's country.\")\n    email: Annotated[\n        str,\n        Field(\n            regex=r\"^[\\S]+@[\\S]+\\.[\\S]{2,}$\",\n            description=\"The person's email address.\",\n        ),\n    ]\n    family_names: Annotated[\n        str,\n        Field(\n            min_length=1,\n            alias=\"family-names\",\n            description=\"The person's family names.\",\n        ),\n    ]\n    fax: Optional[\n        Annotated[str, Field(min_length=1, description=\"The person's fax number.\")]\n    ]\n    given_names: Annotated[\n        str,\n        Field(\n            min_length=1,\n            alias=\"given-names\",\n            description=\"The person's given names.\",\n        ),\n    ]\n    name_particle: Optional[\n        Annotated[\n            str,\n            Field(\n                min_length=1,\n                alias=\"name-particle\",\n                description=\"The person's name particle, e.g., a nobiliary particle or a preposition meaning 'of' or 'from' (for example 'von' in 'Alexander von Humboldt').\",\n                examples=[\"von\"],\n            ),\n        ]\n    ]\n    name_suffix: Optional[\n        Annotated[\n            str,\n            Field(\n                min_length=1,\n                alias=\"name-suffix\",\n                description=\"The person's name-suffix, e.g. 'Jr.' for Sammy Davis Jr. or 'III' for Frank Edwin Wright III.\",\n                examples=[\"Jr.\", \"III\"],\n            ),\n        ]\n    ]\n    orcid: Optional[AnyUrl] = Field(None, description=\"The person's ORCID url.\")\n    post_code: Optional[\n        Annotated[\n            str,\n            Field(\n                min_length=1, alias=\"post-code\", description=\"The person's post-code.\"\n            ),\n        ]\n    ]\n    region: Optional[\n        Annotated[str, Field(min_length=1, description=\"The person's region.\")]\n    ]\n    tel: Optional[\n        Annotated[str, Field(min_length=1, description=\"The person's phone number.\")]\n    ]\n    website: Optional[AnyUrl] = Field(None, description=\"The person's website.\")\n    contribution: Optional[\n        Annotated[\n            str,\n            Field(\n                min_length=1,\n                description=\"Summary of how the person contributed to the project.\",\n            ),\n        ]\n    ]\n    contribution_type: Optional[\n        Union[ContributionTypeEnum, List[ContributionTypeEnum]]\n    ] = Field(None, description=\"Contribution type of contributor.\")\n    contribution_begin: Optional[date] = Field(\n        None, description=\"Beginning date of the contribution.\"\n    )\n    contribution_end: Optional[date] = Field(\n        None, description=\"Ending date of the contribution.\"\n    )\n\n    @property\n    def full_name(self) -&gt; str:\n\"\"\"Return the full name of the person.\"\"\"\n        names = []\n\n        if self.given_names:\n            names.append(self.given_names)\n\n        if self.name_particle:\n            names.append(self.name_particle)\n\n        if self.family_names:\n            names.append(self.family_names)\n\n        if self.name_suffix:\n            names.append(self.name_suffix)\n\n        if not names:\n            return \"\"\n        return \" \".join(names)\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.Person.full_name","title":"full_name  <code>property</code>","text":"<pre><code>full_name: str\n</code></pre> <p>Return the full name of the person.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.Person.Config","title":"Config","text":"<p>Configuration for the Person model.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>class Config:\n\"\"\"Configuration for the Person model.\"\"\"\n\n    extra = Extra.forbid\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadata","title":"ProjectMetadata","text":"<p>         Bases: <code>BaseModel</code></p> <p>Pydantic model for Project Metadata Input. Required fields are name, description, authors, and license.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>class ProjectMetadata(BaseModel):\n\"\"\"Pydantic model for Project Metadata Input. Required fields are name, description, authors, and license.\"\"\"\n\n    name: Annotated[str, Field(min_length=2, description=\"Package name.\")]\n    description: Annotated[str, Field(min_length=1, description=\"Package description.\")]\n    version: Optional[\n        Annotated[str, Field(min_length=1, description=\"Package version.\")]\n    ]\n    authors: List[Person] = Field(None, description=\"Package authors.\")\n    maintainers: Optional[List[Person]] = Field(\n        None, description=\"Package maintainers.\"\n    )\n    contributors: Optional[List[Person]] = Field(\n        None, description=\"Package contributors.\"\n    )\n    keywords: Optional[List[str]] = Field(\n        None, description=\"Keywords that describe the package.\"\n    )\n    license: LicenseEnum = Field(None, description=\"SPDX License string.\")\n    repository: Optional[AnyUrl] = Field(None, description=\"URL of the repository.\")\n    homepage: Optional[AnyUrl] = Field(None, description=\"URL of the package homepage.\")\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter","title":"ProjectMetadataWriter","text":"<p>         Bases: <code>ABC</code></p> <p>Base class for Project Metadata Output Wrapper.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>class ProjectMetadataWriter(ABC):\n\"\"\"Base class for Project Metadata Output Wrapper.\"\"\"\n\n    def __init__(\n        self, path: Path, create_if_not_exists: Optional[bool] = False\n    ) -&gt; None:\n\"\"\"Initialize the Project Metadata Output Wrapper.\"\"\"\n        self.path = path\n        self.create_if_not_exists = create_if_not_exists\n\n        # fill in load\n        self._data: dict = {}\n\n    @abstractmethod\n    def _load(self):\n\"\"\"Load the output file and validate it.\"\"\"\n\n    @abstractmethod\n    def _validate(self):\n\"\"\"Validate the output file.\"\"\"\n\n    def _create_empty_file(self) -&gt; None:\n\"\"\"Create an empty file if it does not exist.\"\"\"\n        self.path.touch()\n\n    def _get_property(self, key: str) -&gt; Optional[Any]:\n\"\"\"Get a property from the data.\"\"\"\n        try:\n            return self._data[key]\n        except KeyError:\n            return None\n\n    def _set_property(self, key: str, value: Any) -&gt; None:\n\"\"\"Set a property in the data.\"\"\"\n        if value:\n            self._data[key] = value\n        return None\n\n    @property\n    def name(self) -&gt; str:\n\"\"\"Return the name of the project.\"\"\"\n        return self._get_property(\"name\")\n\n    @name.setter\n    def name(self, name: str) -&gt; None:\n\"\"\"Set the name of the project.\"\"\"\n        self._set_property(\"name\", name)\n\n    @property\n    def version(self) -&gt; Optional[str]:\n\"\"\"Return the version of the project.\"\"\"\n        return self._get_property(\"version\")\n\n    @version.setter\n    def version(self, version: str) -&gt; None:\n\"\"\"Set the version of the project.\"\"\"\n        self._set_property(\"version\", version)\n\n    @property\n    def description(self) -&gt; Optional[str]:\n\"\"\"Return the description of the project.\"\"\"\n        return self._get_property(\"description\")\n\n    @description.setter\n    def description(self, description: str) -&gt; None:\n\"\"\"Set the description of the project.\"\"\"\n        self._set_property(\"description\", description)\n\n    @property\n    def authors(self):\n\"\"\"Return the authors of the project.\"\"\"\n        return self._get_property(\"authors\")\n\n    @authors.setter\n    @abstractmethod\n    def authors(self, authors: List[Person]) -&gt; None:\n\"\"\"Set the authors of the project.\"\"\"\n\n    @property\n    def maintainers(self):\n\"\"\"Return the maintainers of the project.\"\"\"\n        return self._get_property(\"maintainers\")\n\n    @maintainers.setter\n    @abstractmethod\n    def maintainers(self, maintainers: List[Person]) -&gt; None:\n\"\"\"Set the maintainers of the project.\"\"\"\n\n    @property\n    def keywords(self) -&gt; Optional[List[str]]:\n\"\"\"Return the keywords of the project.\"\"\"\n        return self._get_property(\"keywords\")\n\n    @keywords.setter\n    def keywords(self, keywords: List[str]) -&gt; None:\n\"\"\"Set the keywords of the project.\"\"\"\n        self._set_property(\"keywords\", keywords)\n\n    @property\n    def license(self) -&gt; Optional[str]:\n\"\"\"Return the license of the project.\"\"\"\n        return self._get_property(\"license\")\n\n    @license.setter\n    def license(self, license: Optional[str]) -&gt; None:\n\"\"\"Set the license of the project.\"\"\"\n        self._set_property(\"license\", license)\n\n    @property\n    def homepage(self) -&gt; Optional[str]:\n\"\"\"Return the homepage url of the project.\"\"\"\n        return self._get_property(\"homepage\")\n\n    @homepage.setter\n    def homepage(self, homepage: Optional[str]) -&gt; None:\n\"\"\"Set the homepage url of the project.\"\"\"\n        self._set_property(\"homepage\", homepage)\n\n    @property\n    def repository(self) -&gt; Optional[str]:\n\"\"\"Return the repository url of the project.\"\"\"\n        return self._get_property(\"repository\")\n\n    @repository.setter\n    def repository(self, repository: Optional[str]) -&gt; None:\n\"\"\"Set the repository url of the project.\"\"\"\n        self._set_property(\"repository\", repository)\n\n    def sync(self, metadata: ProjectMetadata) -&gt; None:\n\"\"\"Sync output file with other metadata files.\"\"\"\n        self.name = metadata.name\n        self.description = metadata.description\n        self.version = metadata.version\n        self.keywords = metadata.keywords\n        self.authors = metadata.authors\n        self.maintainers = metadata.maintainers\n        self.license = metadata.license.value\n        self.homepage = str(metadata.homepage)\n        self.repository = str(metadata.repository)\n\n    @abstractmethod\n    def save(self, path: Optional[Path]) -&gt; None:\n\"\"\"Save the output file to the given path.\"\"\"\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.name","title":"name  <code>writable</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Return the name of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.version","title":"version  <code>writable</code> <code>property</code>","text":"<pre><code>version: Optional[str]\n</code></pre> <p>Return the version of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.description","title":"description  <code>writable</code> <code>property</code>","text":"<pre><code>description: Optional[str]\n</code></pre> <p>Return the description of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.authors","title":"authors  <code>writable</code> <code>property</code>","text":"<pre><code>authors\n</code></pre> <p>Return the authors of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.maintainers","title":"maintainers  <code>writable</code> <code>property</code>","text":"<pre><code>maintainers\n</code></pre> <p>Return the maintainers of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.keywords","title":"keywords  <code>writable</code> <code>property</code>","text":"<pre><code>keywords: Optional[List[str]]\n</code></pre> <p>Return the keywords of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.license","title":"license  <code>writable</code> <code>property</code>","text":"<pre><code>license: Optional[str]\n</code></pre> <p>Return the license of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.homepage","title":"homepage  <code>writable</code> <code>property</code>","text":"<pre><code>homepage: Optional[str]\n</code></pre> <p>Return the homepage url of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.repository","title":"repository  <code>writable</code> <code>property</code>","text":"<pre><code>repository: Optional[str]\n</code></pre> <p>Return the repository url of the project.</p>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.__init__","title":"__init__","text":"<pre><code>__init__(\n    path: Path, create_if_not_exists: Optional[bool] = False\n) -&gt; None\n</code></pre> <p>Initialize the Project Metadata Output Wrapper.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>def __init__(\n    self, path: Path, create_if_not_exists: Optional[bool] = False\n) -&gt; None:\n\"\"\"Initialize the Project Metadata Output Wrapper.\"\"\"\n    self.path = path\n    self.create_if_not_exists = create_if_not_exists\n\n    # fill in load\n    self._data: dict = {}\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.sync","title":"sync","text":"<pre><code>sync(metadata: ProjectMetadata) -&gt; None\n</code></pre> <p>Sync output file with other metadata files.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>def sync(self, metadata: ProjectMetadata) -&gt; None:\n\"\"\"Sync output file with other metadata files.\"\"\"\n    self.name = metadata.name\n    self.description = metadata.description\n    self.version = metadata.version\n    self.keywords = metadata.keywords\n    self.authors = metadata.authors\n    self.maintainers = metadata.maintainers\n    self.license = metadata.license.value\n    self.homepage = str(metadata.homepage)\n    self.repository = str(metadata.repository)\n</code></pre>"},{"location":"reference/somesy/core/models/#somesy.core.models.ProjectMetadataWriter.save","title":"save  <code>abstractmethod</code>","text":"<pre><code>save(path: Optional[Path]) -&gt; None\n</code></pre> <p>Save the output file to the given path.</p> Source code in <code>src/somesy/core/models.py</code> <pre><code>@abstractmethod\ndef save(self, path: Optional[Path]) -&gt; None:\n\"\"\"Save the output file to the given path.\"\"\"\n</code></pre>"},{"location":"reference/somesy/core/utils/","title":"utils","text":"<p>Utility functions for somesy.</p>"},{"location":"reference/somesy/core/utils/#somesy.core.utils.set_logger","title":"set_logger","text":"<pre><code>set_logger(\n    debug: bool = False,\n    verbose: bool = False,\n    info: bool = False,\n) -&gt; None\n</code></pre> <p>Set logger to rich handler and add custom logging level.</p> <p>Parameters:</p> Name Type Description Default <code>debug</code> <code>bool</code> <p>Debug mode, overrides verbose and info modes.</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Verbose mode.</p> <code>False</code> <code>info</code> <code>bool</code> <p>NO quiet mode, prints basic output.</p> <code>False</code> Source code in <code>src/somesy/core/utils.py</code> <pre><code>def set_logger(debug: bool = False, verbose: bool = False, info: bool = False) -&gt; None:\n\"\"\"Set logger to rich handler and add custom logging level.\n\n    Args:\n        debug (bool): Debug mode, overrides verbose and info modes.\n        verbose (bool): Verbose mode.\n        info (bool): NO quiet mode, prints basic output.\n    \"\"\"\n    logging.addLevelName(level=VERBOSE, levelName=\"VERBOSE\")\n    logger.propagate = False\n\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    elif verbose:\n        logger.setLevel(VERBOSE)\n    elif info:\n        logger.setLevel(logging.INFO)\n    else:\n        logger.setLevel(logging.WARNING)\n\n    def verbose_print(self, message, *args, **kwargs):\n\"\"\"Verbose logging level print function.\"\"\"\n        if self.isEnabledFor(VERBOSE):\n            self._log(VERBOSE, message.format(args), (), **kwargs)\n\n    setattr(logging.Logger, \"verbose\", verbose_print)  # noqa: B010\n    logging.basicConfig(\n        format=\"%(message)s\",\n        datefmt=\"\",\n    )\n    if not logger.handlers:\n        logger.addHandler(\n            RichHandler(\n                show_time=False,\n                rich_tracebacks=True,\n                show_level=debug,\n                show_path=debug,\n                tracebacks_show_locals=debug,\n                markup=True,\n            )\n        )\n</code></pre>"},{"location":"reference/somesy/pyproject/","title":"pyproject","text":"<p>Pyproject module.</p>"},{"location":"reference/somesy/pyproject/#somesy.pyproject.Poetry","title":"Poetry","text":"<p>         Bases: <code>ProjectMetadataWriter</code></p> <p>Poetry config file handler parsed from pyproject.toml.</p> Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>class Poetry(ProjectMetadataWriter):\n\"\"\"Poetry config file handler parsed from pyproject.toml.\"\"\"\n\n    def __init__(self, path: Path):\n\"\"\"Poetry config file handler parsed from pyproject.toml.\n\n        Args:\n            path (Path): Path to pyproject.toml file.\n        \"\"\"\n        self.path = path\n        self._load()\n        self._validate()\n\n    def _load(self) -&gt; None:\n\"\"\"Load pyproject.toml file.\"\"\"\n        if not self.path.exists():\n            raise FileNotFoundError(f\"pyproject file {self.path} not found\")\n\n        with open(self.path) as f:\n            self._data = load(f)\n\n    def _validate(self) -&gt; None:\n\"\"\"Validate poetry config using pydantic class.\n\n        In order to preserve toml comments and structure, tomlkit library is used.\n        Pydantic class only used for validation.\n        \"\"\"\n        config = dict(self._data[\"tool\"][\"poetry\"])\n        logger.debug(f\"Validating poetry config: {config}\")\n        PoetryConfig(**config)\n\n    def _get_property(self, key: str) -&gt; Optional[Any]:\n\"\"\"Get a property from the pyproject.toml file.\"\"\"\n        try:\n            return self._data[\"tool\"][\"poetry\"][key]\n        except KeyError:\n            return None\n\n    def __getitem__(self, key: str) -&gt; Any:\n\"\"\"Get a property from the pyproject.toml file.\"\"\"\n        try:\n            return self._data[\"tool\"][\"poetry\"][key]\n        except KeyError:\n            return None\n\n    def _set_property(self, key: str, value: Any) -&gt; None:\n\"\"\"Set a property in the pyproject.toml file.\"\"\"\n        if value:\n            self._data[\"tool\"][\"poetry\"][key] = value\n\n    @property\n    def authors(self) -&gt; Optional[List[str]]:\n\"\"\"Project authors.\"\"\"\n        return self._get_property(\"authors\")\n\n    @authors.setter\n    def authors(self, authors: List[Person]) -&gt; None:\n\"\"\"Set project authors.\"\"\"\n        if authors:\n            self._set_property(\"authors\", [person_to_poetry_string(c) for c in authors])\n\n    @property\n    def maintainers(self) -&gt; Optional[List[str]]:\n\"\"\"Project maintainers.\"\"\"\n        return self._get_property(\"maintainers\")\n\n    @maintainers.setter\n    def maintainers(self, maintainers: List[Person]) -&gt; None:\n\"\"\"Set project maintainers.\"\"\"\n        if maintainers:\n            self._set_property(\n                \"maintainers\", [person_to_poetry_string(c) for c in maintainers]\n            )\n\n    def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the pyproject file using instance.\"\"\"\n        if path:\n            with open(path, \"w\") as f:\n                dump(self._data, f)\n        else:\n            with open(self.path, \"w\") as f:\n                dump(self._data, f)\n</code></pre>"},{"location":"reference/somesy/pyproject/#somesy.pyproject.poetry.Poetry.authors","title":"authors  <code>writable</code> <code>property</code>","text":"<pre><code>authors: Optional[List[str]]\n</code></pre> <p>Project authors.</p>"},{"location":"reference/somesy/pyproject/#somesy.pyproject.poetry.Poetry.maintainers","title":"maintainers  <code>writable</code> <code>property</code>","text":"<pre><code>maintainers: Optional[List[str]]\n</code></pre> <p>Project maintainers.</p>"},{"location":"reference/somesy/pyproject/#somesy.pyproject.poetry.Poetry.__init__","title":"__init__","text":"<pre><code>__init__(path: Path)\n</code></pre> <p>Poetry config file handler parsed from pyproject.toml.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to pyproject.toml file.</p> required Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>def __init__(self, path: Path):\n\"\"\"Poetry config file handler parsed from pyproject.toml.\n\n    Args:\n        path (Path): Path to pyproject.toml file.\n    \"\"\"\n    self.path = path\n    self._load()\n    self._validate()\n</code></pre>"},{"location":"reference/somesy/pyproject/#somesy.pyproject.poetry.Poetry.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; Any\n</code></pre> <p>Get a property from the pyproject.toml file.</p> Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>def __getitem__(self, key: str) -&gt; Any:\n\"\"\"Get a property from the pyproject.toml file.\"\"\"\n    try:\n        return self._data[\"tool\"][\"poetry\"][key]\n    except KeyError:\n        return None\n</code></pre>"},{"location":"reference/somesy/pyproject/#somesy.pyproject.poetry.Poetry.save","title":"save","text":"<pre><code>save(path: Optional[Path] = None) -&gt; None\n</code></pre> <p>Save the pyproject file using instance.</p> Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the pyproject file using instance.\"\"\"\n    if path:\n        with open(path, \"w\") as f:\n            dump(self._data, f)\n    else:\n        with open(self.path, \"w\") as f:\n            dump(self._data, f)\n</code></pre>"},{"location":"reference/somesy/pyproject/core/","title":"core","text":"<p>Pyproject core.</p>"},{"location":"reference/somesy/pyproject/core/#somesy.pyproject.core.Pyproject","title":"Pyproject","text":"<p>         Bases: <code>wrapt.ObjectProxy</code></p> <p>Class for syncing pyproject file with other metadata files.</p> Source code in <code>src/somesy/pyproject/core.py</code> <pre><code>class Pyproject(wrapt.ObjectProxy):\n\"\"\"Class for syncing pyproject file with other metadata files.\"\"\"\n\n    def __init__(self, path: Path):\n\"\"\"Pyproject wrapper class. Wraps either setuptools or poetry.\n\n        Args:\n            path (Path): Path to pyproject.toml file.\n\n        Raises:\n            FileNotFoundError: Raised when pyproject.toml file is not found.\n            ValueError: Neither project nor tool.poetry object is found in pyproject.toml file.\n        \"\"\"\n        data = None\n        # load the pyproject.toml file\n        if not path.exists():\n            raise FileNotFoundError(f\"pyproject file {path} not found\")\n\n        with open(path) as f:\n            data = load(f)\n\n        # setuptools has project object\n        if \"project\" in data:\n            logger.verbose(\"Found setuptools config in pyproject.toml file\")\n            self.__wrapped__: Union[SetupTools, Poetry] = SetupTools(path)\n            super().__init__(self.__wrapped__)\n        # poetry has tool.poetry object\n        elif \"tool\" in data and \"poetry\" in data[\"tool\"]:\n            logger.verbose(\"Found poetry config in pyproject.toml file\")\n            self.__wrapped__ = Poetry(path)\n            super().__init__(self.__wrapped__)\n        # value error if other project object is found\n        else:\n            raise ValueError(\n                \"pyproject file is invalid, either add project or tool.poetry object\"\n            )\n</code></pre>"},{"location":"reference/somesy/pyproject/core/#somesy.pyproject.core.Pyproject.__init__","title":"__init__","text":"<pre><code>__init__(path: Path)\n</code></pre> <p>Pyproject wrapper class. Wraps either setuptools or poetry.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to pyproject.toml file.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>Raised when pyproject.toml file is not found.</p> <code>ValueError</code> <p>Neither project nor tool.poetry object is found in pyproject.toml file.</p> Source code in <code>src/somesy/pyproject/core.py</code> <pre><code>def __init__(self, path: Path):\n\"\"\"Pyproject wrapper class. Wraps either setuptools or poetry.\n\n    Args:\n        path (Path): Path to pyproject.toml file.\n\n    Raises:\n        FileNotFoundError: Raised when pyproject.toml file is not found.\n        ValueError: Neither project nor tool.poetry object is found in pyproject.toml file.\n    \"\"\"\n    data = None\n    # load the pyproject.toml file\n    if not path.exists():\n        raise FileNotFoundError(f\"pyproject file {path} not found\")\n\n    with open(path) as f:\n        data = load(f)\n\n    # setuptools has project object\n    if \"project\" in data:\n        logger.verbose(\"Found setuptools config in pyproject.toml file\")\n        self.__wrapped__: Union[SetupTools, Poetry] = SetupTools(path)\n        super().__init__(self.__wrapped__)\n    # poetry has tool.poetry object\n    elif \"tool\" in data and \"poetry\" in data[\"tool\"]:\n        logger.verbose(\"Found poetry config in pyproject.toml file\")\n        self.__wrapped__ = Poetry(path)\n        super().__init__(self.__wrapped__)\n    # value error if other project object is found\n    else:\n        raise ValueError(\n            \"pyproject file is invalid, either add project or tool.poetry object\"\n        )\n</code></pre>"},{"location":"reference/somesy/pyproject/models/","title":"models","text":"<p>Pyproject models.</p>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.PoetryConfig","title":"PoetryConfig","text":"<p>         Bases: <code>BaseModel</code></p> <p>Poetry configuration model.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class PoetryConfig(BaseModel):\n\"\"\"Poetry configuration model.\"\"\"\n\n    name: Annotated[str, Field(regex=r\"^[A-Za-z0-9]+([_-][A-Za-z0-9]+)*$\")]\n    version: Annotated[\n        str, Field(regex=r\"^\\d+(\\.\\d+)*((a|b|rc)\\d+)?(post\\d+)?(dev\\d+)?$\")\n    ]\n    description: str\n    license: Optional[Union[LicenseEnum, List[LicenseEnum]]] = Field(\n        None, description=\"An SPDX license identifier.\"\n    )\n    authors: Set[str]\n    maintainers: Optional[Set[str]] = None\n    readme: Optional[Union[Path, List[Path]]] = None\n    homepage: Optional[HttpUrl] = None\n    repository: Optional[HttpUrl] = None\n    documentation: Optional[HttpUrl] = None\n    keywords: Optional[Set[str]] = None\n    classifiers: Optional[List[str]] = None\n    urls: Optional[Dict[str, HttpUrl]] = None\n\n    @validator(\"version\")\n    def validate_version(cls, v):\n\"\"\"Validate version using PEP 440.\"\"\"\n        try:\n            _ = parse_version(v)\n        except ValueError:\n            raise ValidationError(\"Invalid version\")\n        return v\n\n    @validator(\"authors\", \"maintainers\")\n    def validate_email_format(cls, v):\n\"\"\"Validate email format.\"\"\"\n        for author in v:\n            if (\n                not isinstance(author, str)\n                or \" \" not in author\n                or not EmailStr.validate(author.split(\" \")[-1][1:-1])\n            ):\n                raise ValidationError(\"Invalid email format\")\n        return v\n\n    @validator(\"readme\")\n    def validate_readme(cls, v):\n\"\"\"Validate readme file(s) by checking whether files exist.\"\"\"\n        if type(v) is list:\n            if any(not e.exists() for e in v):\n                raise ValidationError(\"Some file(s) do not exist\")\n        else:\n            if not v.exists():\n                raise ValidationError(\"File does not exist\")\n\n    class Config:\n\"\"\"Pydantic configuration.\"\"\"\n\n        use_enum_values = True\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.PoetryConfig.Config","title":"Config","text":"<p>Pydantic configuration.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class Config:\n\"\"\"Pydantic configuration.\"\"\"\n\n    use_enum_values = True\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.PoetryConfig.validate_version","title":"validate_version","text":"<pre><code>validate_version(v)\n</code></pre> <p>Validate version using PEP 440.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>@validator(\"version\")\ndef validate_version(cls, v):\n\"\"\"Validate version using PEP 440.\"\"\"\n    try:\n        _ = parse_version(v)\n    except ValueError:\n        raise ValidationError(\"Invalid version\")\n    return v\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.PoetryConfig.validate_email_format","title":"validate_email_format","text":"<pre><code>validate_email_format(v)\n</code></pre> <p>Validate email format.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>@validator(\"authors\", \"maintainers\")\ndef validate_email_format(cls, v):\n\"\"\"Validate email format.\"\"\"\n    for author in v:\n        if (\n            not isinstance(author, str)\n            or \" \" not in author\n            or not EmailStr.validate(author.split(\" \")[-1][1:-1])\n        ):\n            raise ValidationError(\"Invalid email format\")\n    return v\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.PoetryConfig.validate_readme","title":"validate_readme","text":"<pre><code>validate_readme(v)\n</code></pre> <p>Validate readme file(s) by checking whether files exist.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>@validator(\"readme\")\ndef validate_readme(cls, v):\n\"\"\"Validate readme file(s) by checking whether files exist.\"\"\"\n    if type(v) is list:\n        if any(not e.exists() for e in v):\n            raise ValidationError(\"Some file(s) do not exist\")\n    else:\n        if not v.exists():\n            raise ValidationError(\"File does not exist\")\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.ContentTypeEnum","title":"ContentTypeEnum","text":"<p>         Bases: <code>Enum</code></p> <p>Content type enum for setuptools field file.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class ContentTypeEnum(Enum):\n\"\"\"Content type enum for setuptools field file.\"\"\"\n\n    plain = \"text/plain\"\n    rst = \"text/x-rst\"\n    markdown = \"text/markdown\"\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.File","title":"File","text":"<p>         Bases: <code>BaseModel</code></p> <p>File model for setuptools.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class File(BaseModel):\n\"\"\"File model for setuptools.\"\"\"\n\n    file: Path\n    content_type: Optional[ContentTypeEnum] = Field(alias=\"content-type\")\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.License","title":"License","text":"<p>         Bases: <code>BaseModel</code></p> <p>License model for setuptools.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class License(BaseModel):\n\"\"\"License model for setuptools.\"\"\"\n\n    file: Optional[Path]\n    text: Optional[LicenseEnum]\n\n    class Config:\n\"\"\"Pydantic configuration.\"\"\"\n\n        validate_assignment = True\n\n    @root_validator(pre=True)\n    def validate_xor(cls, values):\n\"\"\"Validate that only one of file or text is set.\"\"\"\n        if sum([bool(v) for v in values.values()]) != 1:\n            raise ValueError(\"Either file or text must be set.\")\n        return values\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.License.Config","title":"Config","text":"<p>Pydantic configuration.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class Config:\n\"\"\"Pydantic configuration.\"\"\"\n\n    validate_assignment = True\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.License.validate_xor","title":"validate_xor","text":"<pre><code>validate_xor(values)\n</code></pre> <p>Validate that only one of file or text is set.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>@root_validator(pre=True)\ndef validate_xor(cls, values):\n\"\"\"Validate that only one of file or text is set.\"\"\"\n    if sum([bool(v) for v in values.values()]) != 1:\n        raise ValueError(\"Either file or text must be set.\")\n    return values\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.STPerson","title":"STPerson","text":"<p>         Bases: <code>BaseModel</code></p> <p>Person model for setuptools.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class STPerson(BaseModel):\n\"\"\"Person model for setuptools.\"\"\"\n\n    name: Annotated[str, Field(min_length=1)]\n    email: Annotated[str, Field(min_length=1)]\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.URLs","title":"URLs","text":"<p>         Bases: <code>BaseModel</code></p> <p>URLs model for setuptools.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class URLs(BaseModel):\n\"\"\"URLs model for setuptools.\"\"\"\n\n    homepage: Optional[HttpUrl] = None\n    repository: Optional[HttpUrl] = None\n    documentation: Optional[HttpUrl] = None\n    changelog: Optional[HttpUrl] = None\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.SetuptoolsConfig","title":"SetuptoolsConfig","text":"<p>         Bases: <code>BaseModel</code></p> <p>Setuptools input model. Required fields are name, version, description, and requires_python.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class SetuptoolsConfig(BaseModel):\n\"\"\"Setuptools input model. Required fields are name, version, description, and requires_python.\"\"\"\n\n    name: Annotated[str, Field(regex=r\"^[A-Za-z0-9]+([_-][A-Za-z0-9]+)*$\")]\n    version: Annotated[\n        str, Field(regex=r\"^\\d+(\\.\\d+)*((a|b|rc)\\d+)?(post\\d+)?(dev\\d+)?$\")\n    ]\n    description: str\n    readme: Optional[Union[Path, List[Path], File]] = None\n    license: Optional[Union[LicenseEnum, List[LicenseEnum]]] = Field(\n        None, description=\"An SPDX license identifier.\"\n    )\n    authors: Optional[List[STPerson]]\n    maintainers: Optional[List[STPerson]]\n    keywords: Optional[Set[str]]\n    classifiers: Optional[List[str]]\n    urls: Optional[URLs]\n\n    @validator(\"version\")\n    def validate_version(cls, v):\n\"\"\"Validate version using PEP 440.\"\"\"\n        try:\n            _ = parse_version(v)\n        except ValueError:\n            raise ValidationError(\"Invalid version\")\n        return v\n\n    @validator(\"readme\")\n    def validate_readme(cls, v):\n\"\"\"Validate readme file(s) by checking whether files exist.\"\"\"\n        if type(v) is list:\n            if any(not e.exists() for e in v):\n                raise ValidationError(\"Some file(s) do not exist\")\n        elif type(v) is File:\n            if not Path(v.file).exists():\n                raise ValidationError(\"File does not exist\")\n        else:\n            if not v.exists():\n                raise ValidationError(\"File does not exist\")\n\n    @validator(\"authors\", \"maintainers\")\n    def validate_email_format(cls, v):\n\"\"\"Validate email format.\"\"\"\n        for person in v:\n            if person.email:\n                if not EmailStr.validate(person.email):\n                    raise ValidationError(\"Invalid email format\")\n        return v\n\n    class Config:\n\"\"\"Pydantic configuration.\"\"\"\n\n        use_enum_values = True\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.SetuptoolsConfig.Config","title":"Config","text":"<p>Pydantic configuration.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>class Config:\n\"\"\"Pydantic configuration.\"\"\"\n\n    use_enum_values = True\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.SetuptoolsConfig.validate_version","title":"validate_version","text":"<pre><code>validate_version(v)\n</code></pre> <p>Validate version using PEP 440.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>@validator(\"version\")\ndef validate_version(cls, v):\n\"\"\"Validate version using PEP 440.\"\"\"\n    try:\n        _ = parse_version(v)\n    except ValueError:\n        raise ValidationError(\"Invalid version\")\n    return v\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.SetuptoolsConfig.validate_readme","title":"validate_readme","text":"<pre><code>validate_readme(v)\n</code></pre> <p>Validate readme file(s) by checking whether files exist.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>@validator(\"readme\")\ndef validate_readme(cls, v):\n\"\"\"Validate readme file(s) by checking whether files exist.\"\"\"\n    if type(v) is list:\n        if any(not e.exists() for e in v):\n            raise ValidationError(\"Some file(s) do not exist\")\n    elif type(v) is File:\n        if not Path(v.file).exists():\n            raise ValidationError(\"File does not exist\")\n    else:\n        if not v.exists():\n            raise ValidationError(\"File does not exist\")\n</code></pre>"},{"location":"reference/somesy/pyproject/models/#somesy.pyproject.models.SetuptoolsConfig.validate_email_format","title":"validate_email_format","text":"<pre><code>validate_email_format(v)\n</code></pre> <p>Validate email format.</p> Source code in <code>src/somesy/pyproject/models.py</code> <pre><code>@validator(\"authors\", \"maintainers\")\ndef validate_email_format(cls, v):\n\"\"\"Validate email format.\"\"\"\n    for person in v:\n        if person.email:\n            if not EmailStr.validate(person.email):\n                raise ValidationError(\"Invalid email format\")\n    return v\n</code></pre>"},{"location":"reference/somesy/pyproject/poetry/","title":"poetry","text":"<p>Poetry config file handler parsed from pyproject.toml.</p>"},{"location":"reference/somesy/pyproject/poetry/#somesy.pyproject.poetry.Poetry","title":"Poetry","text":"<p>         Bases: <code>ProjectMetadataWriter</code></p> <p>Poetry config file handler parsed from pyproject.toml.</p> Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>class Poetry(ProjectMetadataWriter):\n\"\"\"Poetry config file handler parsed from pyproject.toml.\"\"\"\n\n    def __init__(self, path: Path):\n\"\"\"Poetry config file handler parsed from pyproject.toml.\n\n        Args:\n            path (Path): Path to pyproject.toml file.\n        \"\"\"\n        self.path = path\n        self._load()\n        self._validate()\n\n    def _load(self) -&gt; None:\n\"\"\"Load pyproject.toml file.\"\"\"\n        if not self.path.exists():\n            raise FileNotFoundError(f\"pyproject file {self.path} not found\")\n\n        with open(self.path) as f:\n            self._data = load(f)\n\n    def _validate(self) -&gt; None:\n\"\"\"Validate poetry config using pydantic class.\n\n        In order to preserve toml comments and structure, tomlkit library is used.\n        Pydantic class only used for validation.\n        \"\"\"\n        config = dict(self._data[\"tool\"][\"poetry\"])\n        logger.debug(f\"Validating poetry config: {config}\")\n        PoetryConfig(**config)\n\n    def _get_property(self, key: str) -&gt; Optional[Any]:\n\"\"\"Get a property from the pyproject.toml file.\"\"\"\n        try:\n            return self._data[\"tool\"][\"poetry\"][key]\n        except KeyError:\n            return None\n\n    def __getitem__(self, key: str) -&gt; Any:\n\"\"\"Get a property from the pyproject.toml file.\"\"\"\n        try:\n            return self._data[\"tool\"][\"poetry\"][key]\n        except KeyError:\n            return None\n\n    def _set_property(self, key: str, value: Any) -&gt; None:\n\"\"\"Set a property in the pyproject.toml file.\"\"\"\n        if value:\n            self._data[\"tool\"][\"poetry\"][key] = value\n\n    @property\n    def authors(self) -&gt; Optional[List[str]]:\n\"\"\"Project authors.\"\"\"\n        return self._get_property(\"authors\")\n\n    @authors.setter\n    def authors(self, authors: List[Person]) -&gt; None:\n\"\"\"Set project authors.\"\"\"\n        if authors:\n            self._set_property(\"authors\", [person_to_poetry_string(c) for c in authors])\n\n    @property\n    def maintainers(self) -&gt; Optional[List[str]]:\n\"\"\"Project maintainers.\"\"\"\n        return self._get_property(\"maintainers\")\n\n    @maintainers.setter\n    def maintainers(self, maintainers: List[Person]) -&gt; None:\n\"\"\"Set project maintainers.\"\"\"\n        if maintainers:\n            self._set_property(\n                \"maintainers\", [person_to_poetry_string(c) for c in maintainers]\n            )\n\n    def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the pyproject file using instance.\"\"\"\n        if path:\n            with open(path, \"w\") as f:\n                dump(self._data, f)\n        else:\n            with open(self.path, \"w\") as f:\n                dump(self._data, f)\n</code></pre>"},{"location":"reference/somesy/pyproject/poetry/#somesy.pyproject.poetry.Poetry.authors","title":"authors  <code>writable</code> <code>property</code>","text":"<pre><code>authors: Optional[List[str]]\n</code></pre> <p>Project authors.</p>"},{"location":"reference/somesy/pyproject/poetry/#somesy.pyproject.poetry.Poetry.maintainers","title":"maintainers  <code>writable</code> <code>property</code>","text":"<pre><code>maintainers: Optional[List[str]]\n</code></pre> <p>Project maintainers.</p>"},{"location":"reference/somesy/pyproject/poetry/#somesy.pyproject.poetry.Poetry.__init__","title":"__init__","text":"<pre><code>__init__(path: Path)\n</code></pre> <p>Poetry config file handler parsed from pyproject.toml.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to pyproject.toml file.</p> required Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>def __init__(self, path: Path):\n\"\"\"Poetry config file handler parsed from pyproject.toml.\n\n    Args:\n        path (Path): Path to pyproject.toml file.\n    \"\"\"\n    self.path = path\n    self._load()\n    self._validate()\n</code></pre>"},{"location":"reference/somesy/pyproject/poetry/#somesy.pyproject.poetry.Poetry.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; Any\n</code></pre> <p>Get a property from the pyproject.toml file.</p> Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>def __getitem__(self, key: str) -&gt; Any:\n\"\"\"Get a property from the pyproject.toml file.\"\"\"\n    try:\n        return self._data[\"tool\"][\"poetry\"][key]\n    except KeyError:\n        return None\n</code></pre>"},{"location":"reference/somesy/pyproject/poetry/#somesy.pyproject.poetry.Poetry.save","title":"save","text":"<pre><code>save(path: Optional[Path] = None) -&gt; None\n</code></pre> <p>Save the pyproject file using instance.</p> Source code in <code>src/somesy/pyproject/poetry.py</code> <pre><code>def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the pyproject file using instance.\"\"\"\n    if path:\n        with open(path, \"w\") as f:\n            dump(self._data, f)\n    else:\n        with open(self.path, \"w\") as f:\n            dump(self._data, f)\n</code></pre>"},{"location":"reference/somesy/pyproject/setuptools/","title":"setuptools","text":"<p>Setuptools config file handler parsed from pyproject.toml.</p>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools","title":"SetupTools","text":"<p>         Bases: <code>ProjectMetadataWriter</code></p> <p>Setuptools config file handler parsed from setup.cfg.</p> Source code in <code>src/somesy/pyproject/setuptools.py</code> <pre><code>class SetupTools(ProjectMetadataWriter):\n\"\"\"Setuptools config file handler parsed from setup.cfg.\"\"\"\n\n    def __init__(self, path: Path):\n\"\"\"Setuptools config file handler parsed from pyproject.toml.\n\n        Args:\n            path (Path): Path to pyproject.toml file.\n        \"\"\"\n        self.path = path\n        self._load()\n        self._validate()\n\n    def _load(self) -&gt; None:\n\"\"\"Load pyproject.toml file.\"\"\"\n        if not self.path.exists():\n            raise FileNotFoundError(f\"pyproject file {self.path} not found\")\n\n        with open(self.path) as f:\n            self._data = load(f)\n\n    def _validate(self) -&gt; None:\n\"\"\"Validate setuptools config using pydantic class.\n\n        In order to preserve toml comments and structure, tomlkit library is used.\n        Pydantic class only used for validation.\n        \"\"\"\n        config = dict(self._data[\"project\"])\n        logger.debug(f\"Validating setuptools config: {config}\")\n        SetuptoolsConfig(**config)\n\n    def _get_property(self, key: str) -&gt; Optional[Any]:\n\"\"\"Get a property from the pyproject.toml file.\"\"\"\n        try:\n            return self._data[\"project\"][key]\n        except KeyError:\n            return None\n\n    def _get_url(self, key: str) -&gt; Optional[Any]:\n\"\"\"Get a url object from setuptools config. If key is not found, return None.\"\"\"\n        try:\n            return self._data[\"project\"][\"urls\"][key]\n        except KeyError:\n            return None\n\n    def __getitem__(self, key: str) -&gt; Any:\n\"\"\"Get value from setuptools config. If key is not found, return None.\"\"\"\n        try:\n            return self._data[\"project\"][key]\n        except KeyError:\n            return None\n\n    def _set_property(self, key: str, value: Any) -&gt; None:\n\"\"\"Set a property in the pyproject.toml file.\"\"\"\n        if value:\n            if key in [\"authors\", \"maintainers\"]:\n                it = inline_table()\n                it.add(key, value)\n                self._data[\"project\"].update(it)\n            else:\n                self._data[\"project\"][key] = value\n\n    def _set_url(self, key: str, value: Any) -&gt; None:\n\"\"\"Set a url object in setuptools config.\"\"\"\n        if value:\n            if not (\"urls\" in self._data[\"project\"]):\n                self._data[\"project\"][\"urls\"] = table()\n            self._data[\"project\"][\"urls\"][key] = value\n\n    @property\n    def authors(self) -&gt; Optional[List[dict]]:\n\"\"\"Get authors from setuptools config. If key is not found, return None.\"\"\"\n        return self._get_property(\"authors\").unwrap()\n\n    @authors.setter\n    def authors(self, authors: List[Person]) -&gt; None:\n\"\"\"Set authors in setuptools config.\"\"\"\n        if authors:\n            self._set_property(\n                \"authors\", [person_to_setuptools_dict(c) for c in authors]\n            )\n\n    @property\n    def maintainers(self) -&gt; Optional[List[dict]]:\n\"\"\"Get maintainers from setuptools config. If key is not found, return None.\"\"\"\n        return self._get_property(\"maintainers\").unwrap()\n\n    @maintainers.setter\n    def maintainers(self, maintainers: List[Person]) -&gt; None:\n\"\"\"Set maintainers in setuptools config.\"\"\"\n        if maintainers:\n            self._set_property(\n                \"maintainers\", ([person_to_setuptools_dict(c) for c in maintainers])\n            )\n\n    @property\n    def homepage(self) -&gt; Optional[str]:\n\"\"\"Get homepage url from setuptools config. If key is not found, return None.\"\"\"\n        return self._get_url(\"homepage\")\n\n    @homepage.setter\n    def homepage(self, homepage: Optional[str]) -&gt; None:\n\"\"\"Set homepage url in setuptools config.\"\"\"\n        self._set_url(\"homepage\", homepage)\n\n    @property\n    def repository(self) -&gt; Optional[str]:\n\"\"\"Get repository url from setuptools config. If key is not found, return None.\"\"\"\n        return self._get_url(\"repository\")\n\n    @repository.setter\n    def repository(self, repository: Optional[str]) -&gt; None:\n\"\"\"Set repository url in setuptools config.\"\"\"\n        self._set_url(\"repository\", repository)\n\n    def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the pyproject file using instance.\"\"\"\n        if path:\n            with open(path, \"w\") as f:\n                dump(self._data, f)\n        else:\n            with open(self.path, \"w\") as f:\n                dump(self._data, f)\n</code></pre>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools.authors","title":"authors  <code>writable</code> <code>property</code>","text":"<pre><code>authors: Optional[List[dict]]\n</code></pre> <p>Get authors from setuptools config. If key is not found, return None.</p>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools.maintainers","title":"maintainers  <code>writable</code> <code>property</code>","text":"<pre><code>maintainers: Optional[List[dict]]\n</code></pre> <p>Get maintainers from setuptools config. If key is not found, return None.</p>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools.homepage","title":"homepage  <code>writable</code> <code>property</code>","text":"<pre><code>homepage: Optional[str]\n</code></pre> <p>Get homepage url from setuptools config. If key is not found, return None.</p>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools.repository","title":"repository  <code>writable</code> <code>property</code>","text":"<pre><code>repository: Optional[str]\n</code></pre> <p>Get repository url from setuptools config. If key is not found, return None.</p>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools.__init__","title":"__init__","text":"<pre><code>__init__(path: Path)\n</code></pre> <p>Setuptools config file handler parsed from pyproject.toml.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to pyproject.toml file.</p> required Source code in <code>src/somesy/pyproject/setuptools.py</code> <pre><code>def __init__(self, path: Path):\n\"\"\"Setuptools config file handler parsed from pyproject.toml.\n\n    Args:\n        path (Path): Path to pyproject.toml file.\n    \"\"\"\n    self.path = path\n    self._load()\n    self._validate()\n</code></pre>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; Any\n</code></pre> <p>Get value from setuptools config. If key is not found, return None.</p> Source code in <code>src/somesy/pyproject/setuptools.py</code> <pre><code>def __getitem__(self, key: str) -&gt; Any:\n\"\"\"Get value from setuptools config. If key is not found, return None.\"\"\"\n    try:\n        return self._data[\"project\"][key]\n    except KeyError:\n        return None\n</code></pre>"},{"location":"reference/somesy/pyproject/setuptools/#somesy.pyproject.setuptools.SetupTools.save","title":"save","text":"<pre><code>save(path: Optional[Path] = None) -&gt; None\n</code></pre> <p>Save the pyproject file using instance.</p> Source code in <code>src/somesy/pyproject/setuptools.py</code> <pre><code>def save(self, path: Optional[Path] = None) -&gt; None:\n\"\"\"Save the pyproject file using instance.\"\"\"\n    if path:\n        with open(path, \"w\") as f:\n            dump(self._data, f)\n    else:\n        with open(self.path, \"w\") as f:\n            dump(self._data, f)\n</code></pre>"},{"location":"reference/somesy/pyproject/utils/","title":"utils","text":"<p>Utility functions for pyproject.toml generation.</p>"},{"location":"reference/somesy/pyproject/utils/#somesy.pyproject.utils.person_to_poetry_string","title":"person_to_poetry_string","text":"<pre><code>person_to_poetry_string(person: Person)\n</code></pre> <p>Convert project metadata person object to poetry string for person format \"full name . Source code in <code>src/somesy/pyproject/utils.py</code> <pre><code>def person_to_poetry_string(person: Person):\n\"\"\"Convert project metadata person object to poetry string for person format \"full name &lt;email&gt;.\"\"\"\n    return f\"{person.full_name} &lt;{person.email}&gt;\"\n</code></pre>"},{"location":"reference/somesy/pyproject/utils/#somesy.pyproject.utils.person_to_setuptools_dict","title":"person_to_setuptools_dict","text":"<pre><code>person_to_setuptools_dict(person: Person)\n</code></pre> <p>Convert project metadata person object to setuptools dict for person format.</p> Source code in <code>src/somesy/pyproject/utils.py</code> <pre><code>def person_to_setuptools_dict(person: Person):\n\"\"\"Convert project metadata person object to setuptools dict for person format.\"\"\"\n    return {\"name\": person.full_name, \"email\": person.email}\n</code></pre>"}]}