[tool.poetry]
name = "somesy"
version = "0.2.0"
description = "A CLI tool for synchronizing software project metadata."
authors = ["Mustafa Soylu <m.soylu@fz-juelich.de>", "Anton Pirogov <a.pirogov@fz-juelich.de>"]
maintainers = ["Mustafa Soylu <m.soylu@fz-juelich.de>"]
license = "MIT"

readme = "README.md"
repository = "https://github.com/Materials-Data-Science-and-Informatics/somesy"
homepage = "https://materials-data-science-and-informatics.github.io/somesy"
documentation = "https://materials-data-science-and-informatics.github.io/somesy"

keywords = ["metadata", "FAIR"]
classifiers = [
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "License :: OSI Approved :: MIT License",
]

# the Python packages that will be included in a built distribution:
packages = [{include = "somesy", from = "src"}]

# always include basic info for humans and core metadata in the distribution,
# include files related to test and documentation only in sdist:
include = [
  "*.md", "LICENSE", "LICENSES", ".reuse/dep5", "CITATION.cff", "codemeta.json",
  "mkdocs.yml", "docs", "tests",
  { path = "mkdocs.yml", format = "sdist" },
  { path = "docs", format = "sdist" },
  { path = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.8"
pydantic = {extras = ["email"], version = "^2.4.2"}
ruamel-yaml = "^0.17.21"
tomlkit = "^0.11.6"
importlib-metadata = "^4.11.0"
typer = {extras = ["all"], version = "^0.7.0"}
cffconvert = "^2.0.0"
wrapt = "^1.15.0"
packaging = "^23.1"
rdflib = "^6.3.2"
codemetapy = "^2.5.1"
jinja2 = "^3.1.2"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.18.1"
pre-commit = "^3.1.1"
pytest = "^7.2.2"
pytest-cov = "^4.0.0"
hypothesis = "^6.68.2"
licensecheck = "^2023.1.1"
black = "^23.1.0"
isort = "^5.12.0"
pytest-mock = "^3.10.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mkdocs-material = "^9.4"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.5"
mkdocs-macros-plugin = "^0.7.0"
markdown-include = "^0.8.1"
pymdown-extensions = "^10.2"
markdown-exec = {extras = ["ansi"], version = "^1.6.0"}
mkdocs-coverage = "^1.0.0"
mike = "^2.0.0"
anybadge = "^1.14.0"
interrogate = "^1.5.0"
black = "^23.3.0"
mkdocs-exclude = "^1.0.2"

[tool.poetry.scripts]
somesy = "somesy.main:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# NOTE: You can run the following with "poetry poe TASK"
[tool.poe.tasks]
init-dev = { shell = "pre-commit install" }
lint = "pre-commit run"  # pass --all-files to check everything
test = "pytest"  # pass --cov to also collect coverage info
docs = "mkdocs build"  # run this to generate local documentation
licensecheck = "licensecheck"  # run this when you add new deps

# Tool Configurations
# -------------------

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "--cov-report=term-missing:skip-covered"
filterwarnings = [
"ignore::DeprecationWarning:pkg_resources.*",
"ignore::DeprecationWarning:pyshacl.*",
# Example:
# "ignore::DeprecationWarning:importlib_metadata.*",
]

[tool.coverage.run]
source = ["somesy"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.semantic_release]
version_variable = "src/somesy/__init__.py:__version__"

[tool.flake8]
ignore = ["B008", "E501", "W503", "E712", "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "F722"]

[tool.pydocstyle]
convention = "google"

[tool.interrogate]
fail-under = 90

[tool.bandit]
exclude_dirs = ["tests", "scripts"]

[tool.licensecheck]
using = "poetry"

[tool.mypy]
disable_error_code = ["attr-defined"]
